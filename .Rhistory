library(here)
library(sjPlot)
library(coin)
library(emmeans)
library(stargazer)
library(nnet)
#########################################
# boolean values for saving, username and password for accessing AACT database
savePlot = TRUE
saveData = TRUE
userAACT="djcald"
passwordAACT="DD968radford"
#########################################
# create search parameters
startDate = as.Date("2009-01-01")
endDate = as.Date("2019-12-31")
countriesList = c("United States")
`%nin%` = Negate(`%in%`)
placeboString = c('placebo','standard of care','usual care')
placeboStringOnly = c('placebo')
standardCareString = c('standard of care','usual care')
# terms to search within conditions field
diseaseTerms = tolower(c('Diabetes Mellitus', 'Noninsulin-Dependent', 'Diabetes Mellitus',
'Ketosis-Resistant', 'Diabetes Mellitus', 'Ketosis Resistant',
'Ketosis-Resistant Diabetes Mellitus', 'Diabetes Mellitus', 'Non Insulin Dependent',
'Diabetes Mellitus', 'Non-Insulin-Dependent', 'Non-Insulin-Dependent Diabetes Mellitus',
'Diabetes Mellitus, Stable', 'Stable Diabetes Mellitus', 'Diabetes Mellitus, Type II',
'NIDDM', 'Diabetes Mellitus, Noninsulin Dependent', 'Diabetes Mellitus',
'Maturity-Onset', 'Diabetes Mellitus', 'Maturity Onset',
'Maturity-Onset Diabetes Mellitus', 'Maturity Onset Diabetes Mellitus',
'MODY', 'Diabetes Mellitus, Slow-Onset', 'Diabetes Mellitus, Slow Onset',
'Slow-Onset Diabetes Mellitus', 'Type 2 Diabetes Mellitus',
'Noninsulin-Dependent Diabetes Mellitus',
'Noninsulin Dependent Diabetes Mellitus',
'Maturity-Onset Diabetes', 'Diabetes, Maturity-Onset',
'Maturity Onset Diabetes', 'Type 2 Diabetes', 'Diabetes, Type 2',
'Diabetes Mellitus, Adult-Onset', 'Adult-Onset Diabetes Mellitus',
'Diabetes Mellitus, Adult Onset'))
# terms to exclude
termsSearchCondTitleExclude = c('blahblahblah')
setwd("~/SharedCode/aact_diabetes")
readRDS('diabetesRdata_12_17_2020.rds')
joinedTable <- readRDS('diabetesRdata_12_17_2020.rds')
# create column for phase
# done processing, now do checks, totals, and calculations
joinedTableCheck <- joinedTable %>% filter((multi_arm != 'Control Arm Present') & (!is.na(active_placebo)))
joinedTableActivePlacebo <- joinedTable %>% filter(control_status=='Control Arm Present') %>% group_by(active_placebo) %>% tally()
joinedTableWhichDesign <- joinedTable %>% filter(multi_arm=='Control Arm Present') %>% group_by(intervention_model) %>% tally()
joinedTableWhichDesignTrials <- joinedTable %>% filter(multi_arm=='Control Arm Present') %>% group_by(intervention_model)
joinedTableActivePlaceboCheck <- joinedTable %>% filter(multi_arm!='Control Arm Present') %>% group_by(active_placebo) %>% tally()
joinedTableWhichDesignCheck <- joinedTable %>% filter(multi_arm!='Control Arm Present') %>% group_by(intervention_model) %>% tally()
joinedTableActivePlaceboCheckNoCtrl <- joinedTable %>% filter(multi_arm=='No Control Arm Present') %>% group_by(active_placebo) %>% tally()
joinedTableWhichDesignCheckNoCtrl <- joinedTable %>% filter(multi_arm=='No Control Arm Present') %>% group_by(intervention_model) %>% tally()
joinedTableWhichDesignCheckNoCtrlTrials <- joinedTable %>% filter(multi_arm=='No Control Arm Present') %>% group_by(intervention_model)
joinedTableDoubleCheck <- joinedTable %>% filter((multi_arm != 'Control Arm Present') & ((active_placebo == 'Active & Placebo Present') | (active_placebo == 'Active Comparator') | (active_placebo == 'Placebo Comparator') ))
joinedTableTripleCheck <- joinedTable %>% filter((multi_arm == 'Control Arm Present') & (is.na(active_placebo)))
# check single arm
joinedTableSingleCheck <- joinedTable %>% filter((multi_arm == 'Single-Arm Trial') & ((intervention_model == "Parallel Assignment") | (intervention_model == 'Crossover Assignment')))
# group by year and multi-arm group
joinedTableCount <- joinedTable %>% group_by(yearStart,control_status) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCount <- rename(joinedTableCount,yearlyCount = n)
# calculate statistics
joinedTableTotals <- joinedTable %>% group_by(control_status) %>% tally()
controlN =  joinedTableTotals$n[joinedTableTotals$control_status == 'Control Arm Present']
noControlN = joinedTableTotals$n[joinedTableTotals$control_status == 'No Control Arm Present']
joinedTableSummarize <- joinedTable %>% group_by(control_status) %>% summarize(median=median(number_of_arms,na.rm=TRUE),iqr = IQR(number_of_arms,na.rm=TRUE))
joinedTableSummarizeCountry <- joinedTable %>% group_by(control_status,usaLoc) %>% tally()
joinedTableSummarizeCountry <- joinedTableSummarizeCountry %>% mutate(totalN = case_when(control_status=='Control Arm Present' ~ controlN ,
control_status=='No Control Arm Present' ~ noControlN))
joinedTableSummarizeType <- joinedTable %>% group_by(control_status,study_type) %>% tally()
joinedTableSummarizePhase <- joinedTable %>% group_by(control_status,phase_condensed) %>% tally()
joinedTableSummarizePhaseMore <- joinedTable %>% group_by(control_status,phase) %>% tally()
joinedTableSummarizeAgency <- joinedTable %>% group_by(control_status,fundingComb) %>% tally()
joinedTableSummarizeReported <- joinedTable %>% group_by(control_status,were_results_reported) %>% tally()
joinedTableSummarizeSite<- joinedTable %>% group_by(control_status,multisite) %>% tally()
joinedTableSummarizeStatus<- joinedTable %>% group_by(control_status,last_known_status) %>% tally()
joinedTableSummarizeOverallStatus <- joinedTable %>% group_by(control_status,status_condensed) %>% tally()
joinedTableSummarizePubCount <- joinedTable %>% group_by(control_status,pubCountBool) %>% tally()
joinedTableMedianNumbers <- joinedTable %>% filter(enrollment>0) %>% group_by(control_status) %>% summarize(median=median(enrollment,na.rm=TRUE),iqr = IQR(enrollment,na.rm=TRUE))
joinedTableUnivHosp <- joinedTable %>% filter((univHosp %in% c('University','Hospital')) & fundingComb == 'Other') %>% group_by(control_status,univHosp) %>% tally()
joinedTableAlloc <- joinedTable %>% filter(allocation=='Non-Randomized' | allocation=='Randomized')
joinedTableActivePlaceboAlloc <- joinedTableAlloc %>% filter(control_status=='Control Arm Present') %>% group_by(allocation,active_placebo) %>% tally()
joinedTableSummarizeCountryAlloc <- joinedTableAlloc %>% group_by(allocation,usaLoc) %>% tally()
joinedTableSummarizeTypeAlloc <- joinedTableAlloc %>% group_by(allocation,study_type) %>% tally()
joinedTableSummarizePhaseAlloc <- joinedTableAlloc %>% group_by(allocation,phase_condensed) %>% tally()
joinedTableSummarizePhaseMoreAlloc <- joinedTableAlloc %>% group_by(allocation,phase) %>% tally()
joinedTableSummarizeAgencyAlloc <- joinedTableAlloc %>% group_by(allocation,fundingComb) %>% tally()
joinedTableSummarizeReportedAlloc <- joinedTableAlloc %>% group_by(allocation,were_results_reported) %>% tally()
joinedTableSummarizeSiteAlloc<- joinedTableAlloc %>% group_by(allocation,multisite) %>% tally()
joinedTableSummarizeStatusAlloc<- joinedTableAlloc %>% group_by(allocation,last_known_status) %>% tally()
joinedTableSummarizeOverallStatusAlloc <- joinedTableAlloc %>% group_by(allocation,status_condensed) %>% tally()
joinedTableSummarizePubCountAlloc <- joinedTableAlloc %>% group_by(allocation,pubCountBool) %>% tally()
joinedTableMedianNumbersAlloc <- joinedTableAlloc %>% filter(enrollment>0) %>% group_by(allocation) %>% summarize(median=median(enrollment,na.rm=TRUE),iqr = IQR(enrollment,na.rm=TRUE))
joinedTableUnivHospAlloc <- joinedTableAlloc %>% filter((univHosp %in% c('University','Hospital')) & fundingComb == 'Other') %>% group_by(allocation,univHosp) %>% tally()
joinedTableMask <- joinedTable %>% filter(masking=='None (Open Label)' | masking =='Single' | masking =='Double' | masking =='Triple' |masking =='Quadruple') %>% mutate(masking = recode(masking,"None (Open Label)" = "Not Blinded","Single"="Partially Blinded","Double"="Partially Blinded","Triple"="Partially Blinded","Quadruple"="Fully Blinded"))
joinedTableActivePlaceboMask <- joinedTableMask %>% filter(control_status=='Control Arm Present') %>% group_by(masking,active_placebo) %>% tally()
joinedTableSummarizeCountryMask <- joinedTableMask %>% group_by(masking,usaLoc) %>% tally()
joinedTableSummarizeTypeMask <- joinedTableMask %>% group_by(masking,study_type) %>% tally()
joinedTableSummarizePhaseMask <- joinedTableMask %>% group_by(masking,phase_condensed) %>% tally()
joinedTableSummarizePhaseMoreMask <- joinedTableMask %>% group_by(masking,phase) %>% tally()
joinedTableSummarizeAgencyMask <- joinedTableMask %>% group_by(masking,fundingComb) %>% tally()
joinedTableSummarizeReportedMask <- joinedTableMask %>% group_by(masking,were_results_reported) %>% tally()
joinedTableSummarizeSiteMask<- joinedTableMask %>% group_by(masking,multisite) %>% tally()
joinedTableSummarizeStatusMask<- joinedTableMask %>% group_by(masking,last_known_status) %>% tally()
joinedTableSummarizeOverallStatusMask <- joinedTableMask %>% group_by(masking,status_condensed) %>% tally()
joinedTableSummarizePubCountMask <- joinedTableMask %>% group_by(masking,pubCountBool) %>% tally()
joinedTableMedianNumbersMask <- joinedTableMask %>% filter(enrollment>0) %>% group_by(masking) %>% summarize(median=median(enrollment,na.rm=TRUE),iqr = IQR(enrollment,na.rm=TRUE))
joinedTableUnivHospMask <- joinedTableMask %>% filter((univHosp %in% c('University','Hospital')) & fundingComb == 'Other') %>% group_by(masking,univHosp) %>% tally()
#########################################
# statistical testing
# by control status
# group by year and multi-arm group
joinedTableCountCat <- joinedTable %>% mutate(yearStart = as.factor(yearStart)) %>% group_by(yearStart,control_status) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCountCat <- rename(joinedTableCountCat,yearlyCount = n)
joinedTableCat <- joinedTable %>% mutate(yearStart = as.factor(yearStart)) %>%
mutate(control_status = recode(control_status,"No Control Arm Present" = 0,"Control Arm Present"=1))
stat_model_cat <- glm(control_status~yearStart,data=joinedTableCat,family=binomial(link="logit"))
summary(stat_model_cat)
confint(stat_model_cat)
emmeansModel <- emmeans(stat_model_cat,'yearStart',type='response')
pairs(emmeansModel,reverse=TRUE)
confint(emmeansModel)
joinedTableSampleSizeTest <- joinedTable %>% filter(enrollment>0) %>% select(control_status,yearStart,enrollment,multisite,status_condensed,usaLoc,fundingComb,phase,phase_condensed)
joinedTableSampleSizeTest$control_status <- as.factor(mapvalues(joinedTableSampleSizeTest$control_status,from=c('Control Arm Present','No Control Arm Present'),to=c(1,0)))
joinedTableSampleSizeTest$yearStart <- as.integer(mapvalues(joinedTableSampleSizeTest$yearStart,from=c(min(joinedTableSampleSizeTest$yearStart):max(joinedTableSampleSizeTest$yearStart)),to=c(0:(length(unique(joinedTableSampleSizeTest$yearStart))-1))))
which(! complete.cases(joinedTableSampleSizeTest))
medianSampleSize <- median_test(enrollment~control_status,data = joinedTableSampleSizeTest)
yearlyCount = joinedTableCount$yearlyCount
lengthYC= length(yearlyCount)
stat_model <- glm(control_status~yearStart,family=binomial(link="logit"),data=joinedTableSampleSizeTest)
summary(stat_model)
confint(stat_model)
tab_model(stat_model)
stat_model_group <- glm(control_status~yearStart+multisite+status_condensed+usaLoc+phase_condensed+fundingComb,family=binomial(link="logit"),data=joinedTableSampleSizeTest)
summary(stat_model_group)
tab_model(stat_model_group)
anova(stat_model_group,test="Chisq")
confint(stat_model_group)
tableCountry = table(joinedTable$usaLoc,joinedTable$control_status,useNA = 'ifany')
tableCountryFreq <- joinedTableSummarizeCountry %>% group_by(control_status) %>% mutate(per = round(prop.table(n)*100,1))
tableCountryStats <- sapply(1:nrow(tableCountry),function(z) prop.test(tableCountry[z,, drop = TRUE], n = colSums(tableCountry)))
chisq.test(tableCountry)
tableControlArm = table(joinedTable$active_placebo,joinedTable$control_status,useNA='ifany')
tableControlArmStats <- sapply(1:nrow(tableControlArm),function(z) prop.test(tableControlArm[z,, drop = TRUE], n = colSums(tableControlArm)))
tableStatus = table(joinedTable$status_condensed,joinedTable$control_status,useNA = 'ifany')
tableStatusFreq <- joinedTableSummarizeOverallStatus %>% group_by(control_status) %>% mutate(per = round(prop.table(n)*100,1))
tableStatusStats <- sapply(1:nrow(tableStatus),function(z) prop.test(tableStatus[z,, drop = TRUE], n = colSums(tableStatus)))
chisq.test(tableStatus)
tableSite = table(joinedTable$multisite,joinedTable$control_status,useNA = 'ifany')
tableSiteFreq <- joinedTableSummarizeSite %>% group_by(control_status) %>% mutate(per = round(prop.table(n)*100,1))
tableSiteStats <- sapply(1:nrow(tableSite),function(z) prop.test(tableSite[z,, drop = TRUE], n = colSums(tableSite)))
chisq.test(tableSite)
tableFunder = table(joinedTable$fundingComb,joinedTable$control_status,useNA = 'ifany')
tableFunderFreq <- joinedTableSummarizeAgency %>% group_by(control_status) %>% mutate(per = round(prop.table(n)*100,1))
tableFunderStats <- sapply(1:nrow(tableFunder),function(z) prop.test(tableFunder[z,, drop = TRUE], n = colSums(tableFunder)))
chisq.test(tableFunder)
tablePhase = table(joinedTable$phase_condensed,joinedTable$control_status,useNA = 'ifany')
tablePhaseFreq <- joinedTableSummarizePhase %>% group_by(control_status) %>% mutate(per = round(prop.table(n)*100,1))
tablePhaseStats <- sapply(1:nrow(tablePhase),function(z) prop.test(tablePhase[z,, drop = TRUE], n = colSums(tablePhase)))
chisq.test(tablePhase)
tablePub = table(joinedTable$pubCountBool,joinedTable$control_status,useNA = 'ifany')
tablePubFreq <- joinedTableSummarizePubCount %>% group_by(control_status) %>% mutate(per = round(prop.table(n)*100,1))
tablePubStats <- sapply(1:nrow(tablePub),function(z) prop.test(tablePub[z,, drop = TRUE], n = colSums(tablePub)))
chisq.test(tablePub)
tableResults = table(joinedTable$were_results_reported,joinedTable$control_status,useNA = 'ifany')
tableResultsFreq <- joinedTableSummarizeReported %>% group_by(control_status) %>% mutate(per = round(prop.table(n)*100,1))
tableResultsStats <- sapply(1:nrow(tableResults),function(z) prop.test(tableResults[z,, drop = TRUE], n = colSums(tableResults)))
chisq.test(tableResults)
tableYearlyCount = table(joinedTable$yearStart,joinedTable$control_status,useNA='ifany')
tableYearlyCountStats <- sapply(1:nrow(tableYearlyCount),function(z) prop.test(tableYearlyCount[z,, drop = TRUE], n = colSums(tableYearlyCount)))
chisq.test(tableYearlyCount)
# by randomization
joinedTableAlloc <- joinedTable %>% filter(allocation=='Non-Randomized' | allocation=='Randomized')
joinedTableCountAlloc <- joinedTableAlloc %>% group_by(yearStart,allocation) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCountAlloc <- rename(joinedTableCountAlloc,yearlyCount = n)
# group by year and multi-arm group
joinedTableCountCatAlloc <- joinedTableAlloc %>% mutate(yearStart = as.factor(yearStart)) %>% group_by(yearStart,allocation) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCountCatAlloc <- rename(joinedTableCountCatAlloc,yearlyCount = n)
joinedTableCatAlloc <- joinedTableAlloc %>% mutate(yearStart = as.factor(yearStart)) %>%
mutate(allocation = recode(allocation,"Non-Randomized" = 0,"Randomized"=1))
stat_model_catAlloc <- glm(allocation~yearStart,data=joinedTableCatAlloc,family=binomial(link="logit"))
summary(stat_model_catAlloc)
confint(stat_model_catAlloc)
emmeansModelAlloc <- emmeans(stat_model_catAlloc,'yearStart',type='response')
pairs(emmeansModelAlloc,reverse=TRUE)
confint(emmeansModelAlloc)
joinedTableSampleSizeTestAlloc <- joinedTableAlloc %>% filter(enrollment>0) %>% select(allocation,control_status,yearStart,enrollment,multisite,status_condensed,usaLoc,fundingComb,phase,phase_condensed)
joinedTableSampleSizeTestAlloc$allocation <- as.factor(mapvalues(joinedTableSampleSizeTestAlloc$allocation,from=c('Randomized','Non-Randomized'),to=c(1,0)))
joinedTableSampleSizeTestAlloc$yearStart <- as.integer(mapvalues(joinedTableSampleSizeTestAlloc$yearStart,from=c(min(joinedTableSampleSizeTestAlloc$yearStart):max(joinedTableSampleSizeTestAlloc$yearStart)),to=c(0:(length(unique(joinedTableSampleSizeTestAlloc$yearStart))-1))))
which(! complete.cases(joinedTableSampleSizeTest))
medianSampleSizeAlloc <- median_test(enrollment~allocation,data = joinedTableSampleSizeTestAlloc)
yearlyCountAlloc = joinedTableCountAlloc$yearlyCount
lengthYCAlloc= length(yearlyCountAlloc)
stat_modelAlloc <- glm(allocation~yearStart,family=binomial(link="logit"),data=joinedTableSampleSizeTestAlloc)
summary(stat_modelAlloc)
confint(stat_modelAlloc)
tab_model(stat_modelAlloc)
tableCountryAlloc = table(joinedTableAlloc$usaLoc,joinedTableAlloc$allocation,useNA = 'ifany')
tableCountryFreqAlloc <- joinedTableSummarizeCountryAlloc %>% group_by(allocation) %>% mutate(per = round(prop.table(n)*100,1))
tableCountryStatsAlloc <- sapply(1:nrow(tableCountryAlloc),function(z) prop.test(tableCountryAlloc[z,, drop = TRUE], n = colSums(tableCountryAlloc)))
chisq.test(tableCountryAlloc)
tableControlArmAlloc = table(joinedTableAlloc$active_placebo,joinedTableAlloc$allocation,useNA='ifany')
tableControlArmStatsAlloc <- sapply(1:nrow(tableControlArmAlloc),function(z) prop.test(tableControlArmAlloc[z,, drop = TRUE], n = colSums(tableControlArmAlloc)))
tableStatusAlloc = table(joinedTableAlloc$status_condensed,joinedTableAlloc$allocation,useNA = 'ifany')
tableStatusFreqAlloc <- joinedTableSummarizeOverallStatusAlloc %>% group_by(allocation) %>% mutate(per = round(prop.table(n)*100,1))
tableStatusStatsAlloc <- sapply(1:nrow(tableStatusAlloc),function(z) prop.test(tableStatusAlloc[z,, drop = TRUE], n = colSums(tableStatusAlloc)))
chisq.test(tableStatusAlloc)
tableSiteAlloc = table(joinedTableAlloc$multisite,joinedTableAlloc$allocation,useNA = 'ifany')
tableSiteFreqAlloc <- joinedTableSummarizeSiteAlloc %>% group_by(allocation) %>% mutate(per = round(prop.table(n)*100,1))
tableSiteStatsAlloc <- sapply(1:nrow(tableSiteAlloc),function(z) prop.test(tableSiteAlloc[z,, drop = TRUE], n = colSums(tableSiteAlloc)))
chisq.test(tableSiteAlloc)
tableFunderAlloc = table(joinedTableAlloc$fundingComb,joinedTableAlloc$allocation,useNA = 'ifany')
tableFunderFreqAlloc <- joinedTableSummarizeAgencyAlloc %>% group_by(allocation) %>% mutate(per = round(prop.table(n)*100,1))
tableFunderStatsAlloc <- sapply(1:nrow(tableFunderAlloc),function(z) prop.test(tableFunderAlloc[z,, drop = TRUE], n = colSums(tableFunderAlloc)))
chisq.test(tableFunderAlloc)
tablePhaseAlloc = table(joinedTableAlloc$phase_condensed,joinedTableAlloc$allocation,useNA = 'ifany')
tablePhaseFreqAlloc <- joinedTableSummarizePhaseAlloc %>% group_by(allocation) %>% mutate(per = round(prop.table(n)*100,1))
tablePhaseStatsAlloc <- sapply(1:nrow(tablePhaseAlloc),function(z) prop.test(tablePhaseAlloc[z,, drop = TRUE], n = colSums(tablePhaseAlloc)))
chisq.test(tablePhaseAlloc)
tablePubAlloc = table(joinedTableAlloc$pubCountBool,joinedTableAlloc$allocation,useNA = 'ifany')
tablePubFreqAlloc <- joinedTableSummarizePubCountAlloc %>% group_by(allocation) %>% mutate(per = round(prop.table(n)*100,1))
tablePubStatsAlloc <- sapply(1:nrow(tablePub),function(z) prop.test(tablePub[z,, drop = TRUE], n = colSums(tablePub)))
chisq.test(tablePubAlloc)
tableResultsAlloc = table(joinedTableAlloc$were_results_reported,joinedTableAlloc$allocation,useNA = 'ifany')
tableResultsFreqAlloc <- joinedTableSummarizeReportedAlloc %>% group_by(allocation) %>% mutate(per = round(prop.table(n)*100,1))
tableResultsStatsAlloc <- sapply(1:nrow(tableResults),function(z) prop.test(tableResults[z,, drop = TRUE], n = colSums(tableResults)))
chisq.test(tableResultsAlloc)
tableYearlyCountAlloc = table(joinedTableAlloc$yearStart,joinedTableAlloc$allocation,useNA='ifany')
tableYearlyCountStatsAlloc <- sapply(1:nrow(tableYearlyCount),function(z) prop.test(tableYearlyCount[z,, drop = TRUE], n = colSums(tableYearlyCount)))
chisq.test(tableYearlyCount)
# by blinding
joinedTableCountMask <- joinedTableMask %>%  group_by(yearStart,masking) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCountMask <- rename(joinedTableCountMask,yearlyCount = n)
# group by year and multi-arm group
joinedTableCountCatMask <- joinedTableMask %>% mutate(yearStart = as.factor(yearStart)) %>% group_by(yearStart,masking) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCountCatMask <- rename(joinedTableCountCatMask,yearlyCount = n)
joinedTableCatMask <- joinedTableMask %>% mutate(yearStart = as.factor(yearStart)) %>%
#mutate(masking = as.factor(recode(masking,"Not Blinded" = 0,"Partially Blinded"=1,"Fully Blinded"=2)))
mutate(masking = as.factor(masking))
#stat_model_catMask <- glm(masking~yearStart,data=joinedTableCatMask,family=binomial(link="logit"))
#summary(stat_model_catMask)
#confint(stat_model_catMask)
#emmeansModelMask <- emmeans(stat_model_catMask,'yearStart',type='response')
#pairs(emmeansModelMask,reverse=TRUE)
#confint(emmeansModelMask)
joinedTableCatMask$masking2 = relevel(joinedTableCatMask$masking, ref = "Not Blinded")
stat_model_catMask <- multinom(masking2~yearStart,data=joinedTableCatMask)
summary(stat_model_catMask)
stargazer(stat_model_catMask,type="html",out="stat_model_catMask.htm")
confint(stat_model_catMask)
joinedTableSampleSizeTestMask <- joinedTableMask %>% filter(enrollment>0) %>% select(masking,yearStart,enrollment,multisite,status_condensed,usaLoc,fundingComb,phase,phase_condensed)
joinedTableSampleSizeTestMask$masking <- as.factor(mapvalues(joinedTableSampleSizeTestMask$masking,from=c('Fully Blinded','Partially Blinded','Not Blinded'),to=c(2,1,0)))
joinedTableSampleSizeTestMask$yearStart <- as.integer(mapvalues(joinedTableSampleSizeTestMask$yearStart,from=c(min(joinedTableSampleSizeTestMask$yearStart):max(joinedTableSampleSizeTestMask$yearStart)),to=c(0:(length(unique(joinedTableSampleSizeTestMask$yearStart))-1))))
which(! complete.cases(joinedTableSampleSizeTestMask))
medianSampleSizeMask <- median_test(enrollment~masking,data = joinedTableSampleSizeTestMask)
yearlyCountMask = joinedTableCountMask$yearlyCount
lengthYC= length(yearlyCountMask)
stat_modelMask <- glm(masking~yearStart,family=binomial(link="logit"),data=joinedTableSampleSizeTestMask)
summary(stat_modelMask)
confint(stat_modelMask)
tab_model(stat_modelMask)
tableCountryMask = table(joinedTableMask$usaLoc,joinedTableMask$masking,useNA = 'ifany')
tableCountryFreqMask <- joinedTableSummarizeCountryMask %>% group_by(masking) %>% mutate(per = round(prop.table(n)*100,1))
tableCountryStatsMask <- sapply(1:nrow(tableCountry),function(z) prop.test(tableCountryMask[z,, drop = TRUE], n = colSums(tableCountryMask)))
chisq.test(tableCountryMask)
tableControlArmMask = table(joinedTableMask$active_placebo,joinedTableMask$masking,useNA='ifany')
tableControlArmStatsMask <- sapply(1:nrow(tableControlArmMask),function(z) prop.test(tableControlArmMask[z,, drop = TRUE], n = colSums(tableControlArmMask)))
tableStatusMask = table(joinedTableMask$status_condensed,joinedTableMask$masking,useNA = 'ifany')
tableStatusFreqMask <- joinedTableSummarizeOverallStatusMask %>% group_by(masking) %>% mutate(per = round(prop.table(n)*100,1))
tableStatusStatsMask <- sapply(1:nrow(tableStatus),function(z) prop.test(tableStatusMask[z,, drop = TRUE], n = colSums(tableStatusMask)))
chisq.test(tableStatusMask)
tableSiteMask = table(joinedTableMask$multisite,joinedTableMask$masking,useNA = 'ifany')
tableSiteFreqMask <- joinedTableSummarizeSiteMask %>% group_by(masking) %>% mutate(per = round(prop.table(n)*100,1))
tableSiteStatsMask <- sapply(1:nrow(tableSiteMask),function(z) prop.test(tableSiteMask[z,, drop = TRUE], n = colSums(tableSiteMask)))
chisq.test(tableSiteMask)
tableFunderMask = table(joinedTableMask$fundingComb,joinedTableMask$masking,useNA = 'ifany')
tableFunderFreqMask <- joinedTableSummarizeAgencyMask %>% group_by(masking) %>% mutate(per = round(prop.table(n)*100,1))
tableFunderStatsMask <- sapply(1:nrow(tableFunderMask),function(z) prop.test(tableFunderMask[z,, drop = TRUE], n = colSums(tableFunderMask)))
chisq.test(tableFunder)
tablePhaseMask = table(joinedTableMask$phase_condensed,joinedTableMask$masking,useNA = 'ifany')
tablePhaseFreqMask <- joinedTableSummarizePhaseMask %>% group_by(masking) %>% mutate(per = round(prop.table(n)*100,1))
tablePhaseStatsMask <- sapply(1:nrow(tablePhaseMask),function(z) prop.test(tablePhaseMask[z,, drop = TRUE], n = colSums(tablePhaseMask)))
chisq.test(tablePhaseMask)
tablePubMask = table(joinedTableMask$pubCountBool,joinedTableMask$masking,useNA = 'ifany')
tablePubFreqMask <- joinedTableSummarizePubCountMask %>% group_by(masking) %>% mutate(per = round(prop.table(n)*100,1))
tablePubStatsMask <- sapply(1:nrow(tablePubMask),function(z) prop.test(tablePubMask[z,, drop = TRUE], n = colSums(tablePubMask)))
chisq.test(tablePubMask)
tableResultsMask = table(joinedTableMask$were_results_reported,joinedTableMask$masking,useNA = 'ifany')
tableResultsFreqMask <- joinedTableSummarizeReportedMask %>% group_by(masking) %>% mutate(per = round(prop.table(n)*100,1))
tableResultsStatsMask <- sapply(1:nrow(tableResultsMask),function(z) prop.test(tableResultsMask[z,, drop = TRUE], n = colSums(tableResultsMask)))
chisq.test(tableResultsMask)
tableYearlyCountMask = table(joinedTableMask$yearStart,joinedTableMask$masking,useNA='ifany')
tableYearlyCountStatsMask <- sapply(1:nrow(tableYearlyCountMask),function(z) prop.test(tableYearlyCountMask[z,, drop = TRUE], n = colSums(tableYearlyCountMask)))
chisq.test(tableYearlyCountMask)
########################
if (saveData){
saveRDS(joinedTable, file = "diabetesRdata_1_7_2021.rds")
#write.csv(designTrialExamineExperimentalOnly,'experimentalOnly_1_7_2021.csv')
write.csv(joinedTable,'diabetesTableTotal_1_7_2021.csv')
#write.csv(joinedTableDiverseDiscontinued,'diabetesTableDiscDiverse_1_7_2021.csv')
#write.csv(joinedTableSummarizeInterv,'diabetesTableInterv_1_7_2021.csv')
#write.csv(joinedTableSummarizeType,'diabetesTableType_1_7_2021.csv')
#write.csv(joinedTableSummarizePhase,'diabetesTablePhase_1_7_2021.csv')
#write.csv(joinedTableSummarizeAgency,'diabetesTableAgency_1_7_2021.csv')
#write.csv(joinedTableSummarizeReported,'diabetesTableReported_1_7_2021.csv')
#write.csv(joinedTableSummarizeSite,'diabetesTableSite_1_7_2021.csv')
#write.csv(joinedTableSummarizeStatus,'diabetesTableStatus_1_7_2021.csv')
#write.csv(joinedTableSummarizeOverallStatus,'diabetesTableOverallStatus_1_7_2021.csv')
#write.csv(joinedTableSummarizePubCount,'diabetesTablePubCount_1_7_2021.csv')
}
#########################################
# make plots
pInd<-ggplot(joinedTableCount, aes(x=yearStart,y=yearlyCount, group=control_status, color=control_status)) +
geom_line()+
geom_point() +
labs(title="Number of Diabetes Clinical Trials \nRegistered by Control Arm Status, by Year",x = "Year Registered",y="Number of Trials",color='Control Arm Status') +
ylim(0,max(joinedTableCount$yearlyCount)+10) +
scale_x_continuous(breaks=seq(2009,2019,1),limits=c(2009,2019)) +
scale_color_jama()
print(pInd)
if (savePlot){
ggsave("trialsByYearMultiArm_1_7_2021.png", units="in", width=6, height=4, dpi=600)
}
# make plots
pInd<-ggplot(joinedTableCountAlloc, aes(x=yearStart,y=yearlyCount, group=allocation, color=allocation)) +
geom_line()+
geom_point() +
labs(title="Number of Diabetes Clinical Trials \nRegistered by Randomization, by Year",x = "Year Registered",y="Number of Trials",color='Randomization') +
ylim(0,max(joinedTableCountAlloc$yearlyCount)+10) +
scale_x_continuous(breaks=seq(2009,2019,1),limits=c(2009,2019)) +
scale_color_jama()
print(pInd)
if (savePlot){
ggsave("trialsByYearAlloc_1_7_2021.png", units="in", width=6, height=4, dpi=600)
}
# make plots
pInd<-ggplot(joinedTableCountMask, aes(x=yearStart,y=yearlyCount, group=masking, color=masking)) +
geom_line()+
geom_point() +
labs(title="Number of Diabetes Clinical Trials \nRegistered by Masking, by Year",x = "Year Registered",y="Number of Trials",color='Masking') +
ylim(0,max(joinedTableCountMask$yearlyCount)+10) +
scale_x_continuous(breaks=seq(2009,2019,1),limits=c(2009,2019)) +
scale_color_jama()
print(pInd)
if (savePlot){
ggsave("trialsByYearMask_1_7_2021.png", units="in", width=6, height=4, dpi=600)
}
#pHist<-ggplot(joinedTable, aes(x=number_of_arms,color=control_status,fill=control_status)) +
#  geom_histogram(binwidth=1,alpha=0.5) +
#  labs(x = "Number of Arms",y="Count",fill='Control Arm Status') +
#  coord_cartesian(xlim=c(0,max(joinedTable$number_of_arms,na.rm = TRUE)))  +
#  guides(color=FALSE)
#print(pHist)
#if (savePlot){
#  ggsave("trialsByYearHist_1_7_2021.png", units="in", width=5, height=4, dpi=600)
#}
joinedTableActivePlaceboMask
78+28+2+191
tableControlAlloc = table(joinedTableAlloc$active_placebo,joinedTableAlloc$allocation,useNA = 'ifany')
tableControlFreqAlloc <- joinedTableActivePlaceboAllo %>% group_by(allocation) %>% mutate(per = round(prop.table(n)*100,1))
tableControlStatsAlloc <- sapply(1:nrow(tableControlAlloc),function(z) prop.test(tableControlAlloc[z,, drop = TRUE], n = colSums(tableControlAlloc)))
chisq.test(tableControlAlloc)
tableControlAlloc = table(joinedTableAlloc$active_placebo,joinedTableAlloc$allocation,useNA = 'ifany')
tableControlFreqAlloc <- joinedTableActivePlaceboAlloc %>% group_by(allocation) %>% mutate(per = round(prop.table(n)*100,1))
tableControlStatsAlloc <- sapply(1:nrow(tableControlAlloc),function(z) prop.test(tableControlAlloc[z,, drop = TRUE], n = colSums(tableControlAlloc)))
chisq.test(tableControlAlloc)
tableControlAlloc = table(joinedTableAlloc$active_placebo,joinedTableAlloc$allocation,useNA = 'ifany')
tableControlFreqAlloc <- joinedTableActivePlaceboAlloc %>% group_by(allocation) %>% mutate(per = round(prop.table(n)*100,1))
tableControlStatsAlloc <- sapply(1:nrow(tableControlAlloc),function(z) prop.test(tableControlAlloc[z,, drop = TRUE], n = colSums(tableControlAlloc)))
chisq.test(tableControlAlloc)
tableControlAlloc
13+46+9+25
622+638+245+235
joinedTableAlloc
joinedTableCountAlloc <- joinedTableAlloc %>% group_by(allocation) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCountAlloc <- rename(joinedTableCountAlloc,yearlyCount = n)
joinedTableCountAlloc
joinedTableCountMask <- joinedTableMask %>%  group_by(masking) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCountMask <- rename(joinedTableCountMask,yearlyCount = n)
joinedTableCountMask
tableControlMask = table(joinedTableMask$active_placebo,joinedTablemask$masking,useNA = 'ifany')
tableControlFreqMask <- joinedTableActivePlaceboMask %>% group_by(masking) %>% mutate(per = round(prop.table(n)*100,1))
tableControlStatsMask <- sapply(1:nrow(tableControlMask),function(z) prop.test(tableControlMask[z,, drop = TRUE], n = colSums(tableControlMask)))
chisq.test(tableControlMask)
tableControlMask = table(joinedTableMask$active_placebo,joinedTableMask$masking,useNA = 'ifany')
tableControlFreqMask <- joinedTableActivePlaceboMask %>% group_by(masking) %>% mutate(per = round(prop.table(n)*100,1))
tableControlStatsMask <- sapply(1:nrow(tableControlMask),function(z) prop.test(tableControlMask[z,, drop = TRUE], n = colSums(tableControlMask)))
chisq.test(tableControlMask)
tableControlMask
joinedTableActivePlacebo
tableStatus
chisq.test(tableStatus)
tableSite
chisq.test(tableSite)
tableSiteFreq
joinedTableActivePlacebo
254+686+261+641
tableControlStatusFreq <- joinedTableActivePlacebo %>% mutate(per = round(prop.table(n)*100,1))
tableControlStatusFreq
13.8+37.2+14.2+34.8
tableStatusFreq
tableSiteFreq
chisq.test(tableSite)
tableCOuntry
tableCountry
tableCountryFreq
chisq.test(tableCountry)
tablePhaseFreq
chisq.test(tablePhase)
tableFunderFreq
chisq.test(tableFunderFreq)
chisq.test(tableFunder)
joinedTableUnivHosp
tableResults
tablePub
tableResultsFreq
tablePubFreq
chisq.test(tableResults)
chisq.test(tablePub)
# group by year and multi-arm group
joinedTableCountCat <- joinedTable %>% mutate(yearStart = as.factor(yearStart)) %>% group_by(yearStart,control_status) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCountCat <- rename(joinedTableCountCat,yearlyCount = n)
print(joinedTableCountCat,n=40)
tableControlFreqAlloc
chisq.test(tableControlAlloc)
245+638+235+622
joinedTableActivePlaceboAlloc <- joinedTableAlloc%>% group_by(allocation,active_placebo) %>% tally()
ableControlAlloc = table(joinedTableAlloc$active_placebo,joinedTableAlloc$allocation,useNA = 'ifany')
tableControlFreqAlloc <- joinedTableActivePlaceboAlloc %>% group_by(allocation) %>% mutate(per = round(prop.table(n)*100,1))
tableControlStatsAlloc <- sapply(1:nrow(tableControlAlloc),function(z) prop.test(tableControlAlloc[z,, drop = TRUE], n = colSums(tableControlAlloc)))
chisq.test(tableControlAlloc)
tableControlAlloc = table(joinedTableAlloc$active_placebo,joinedTableAlloc$allocation,useNA = 'ifany')
tableControlFreqAlloc <- joinedTableActivePlaceboAlloc %>% group_by(allocation) %>% mutate(per = round(prop.table(n)*100,1))
tableControlStatsAlloc <- sapply(1:nrow(tableControlAlloc),function(z) prop.test(tableControlAlloc[z,, drop = TRUE], n = colSums(tableControlAlloc)))
chisq.test(tableControlAlloc)
tableControlAlloc
tableControlFreqAlloc
tableControlAllocFreq
tableControlFreqAlloc
joinedTableActivePlaceboMask <- joinedTableMask %>% group_by(masking,active_placebo) %>% tally()
tableControlMask = table(joinedTableMask$active_placebo,joinedTableMask$masking,useNA = 'ifany')
tableControlFreqMask <- joinedTableActivePlaceboMask %>% group_by(masking) %>% mutate(per = round(prop.table(n)*100,1))
tableControlStatsMask <- sapply(1:nrow(tableControlMask),function(z) prop.test(tableControlMask[z,, drop = TRUE], n = colSums(tableControlMask)))
chisq.test(tableControlMask)
tableControlFreqMask
chisq.test(tableControlAlloc)
tableControlFreqAlloc
tableStatusFreqAlloc
chisq.test(tableStatusAlloc)
tableSiteAllocFre
tableSiteFreqAlloc
chisq.test(tableSiteAlloc)
tableCountryFreqAlloc
chisq.test(tableCountryAlloc)
fisher.test(tableCountryFreqAlloc)
tableCountryFreqAlloc
fisher.test(tableCountryAlloc)
tableControlAlloc
tableCountryAlloc
chisq.test(tableCountryAlloc)
chisq.test(tableCountryAlloc)$expected
chisq.test(tableSiteAlloc)
chisq.test(tablePhaseAlloc)
tablePhaseFreqAlloc
tableFunderFreqAlloc
chisq.test(tableFunderFreq)
chisq.test(tableFunderAlloc)
joinedTableUnivHospAlloc
tableResultsFreqAlloc
chisq.test(tableResultsAlloc)
tablePubFreqAlloc
chisq.test(tablePubAlloc)
tableControlFreqMask
chisq.test(tableControlMask)
chisq.test(tableStatusMask)
tableStatusFreqMask
1276+882+311
chisq.test(tableSiteMask)
tableSiteFreqMask
tableCountryFreqMask
chisq.test(tableCountryMask)
chisq.test(tablePhaseMask)
tablePhaseFreqMask
tableFunderMask
chisq.test(tableFunderMask)
tableFunderFreqMask
joinedTableUnivHospMask
medianSampleSizeMask <- median_test(enrollment~masking,data = joinedTableSampleSizeTestMask)
medianSampleSizeMask
tableResultsFreqMask
chisq.tesT(tableResultsMask)
chisq.test(tableResultsMask)
tablePubFreqMask
chisq.test(tablePubMask)
