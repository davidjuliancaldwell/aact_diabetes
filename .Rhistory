broom
library(broom)
sapply(a,broom::tidy)
sapply(a,"[[","conf.int")
a
a[1]
a[2]
a[4]
a[6]
str(a)
sapply(a,"[[","conf.int")
a
a$conf.int
tableCountry = table(joinedTable$usaLoc,joinedTable$control_status,useNA = 'ifany')
tableCountryStats <- sapply(1:nrow(tableCountry),function(z) prop.test(tableCountry[z,, drop = TRUE], n = colSums(tableCountry)))
tableControlArm = table(joinedTableSubset$active_placebo,joinedTableSubset$control_status,useNA='ifany')
tableControlArmStats <- sapply(1:nrow(tableControlArm),function(z) prop.test(tableControlArm[z,, drop = TRUE], n = colSums(tableControlArm)))
tableCountry = table(joinedTable$usaLoc,joinedTable$control_status,useNA = 'ifany')
tableCountryStats <- sapply(1:nrow(tableCountry),function(z) prop.test(tableCountry[z,, drop = TRUE], n = colSums(tableCountry)))
tableControlArm = table(joinedTable$active_placebo,joinedTable$control_status,useNA='ifany')
tableControlArmStats <- sapply(1:nrow(tableControlArm),function(z) prop.test(tableControlArm[z,, drop = TRUE], n = colSums(tableControlArm)))
tableControlArmStats
tableControlArmStats[,3]
tidy(tableCountryStats)
tibble
tibble::as_tibble(tableCountryStats)
tibble::enframe(tableCountryStats)
joinedTableCount
joinedTable$pubCount
joinedTable$pubCountBool
joinedTableSummarizePubCount
joinedTableSummarizeReported
tableCountry = table(joinedTable$usaLoc,joinedTable$control_status,useNA = 'ifany')
tableCountryStats <- sapply(1:nrow(tableCountry),function(z) prop.test(tableCountry[z,, drop = TRUE], n = colSums(tableCountry)))
tableControlArm = table(joinedTable$active_placebo,joinedTable$control_status,useNA='ifany')
tableControlArmStats <- sapply(1:nrow(tableControlArm),function(z) prop.test(tableControlArm[z,, drop = TRUE], n = colSums(tableControlArm)))
tableStatus = table(joinedTable$status_condensed,joinedTable$control_status,useNA = 'ifany')
tableStatusStats <- sapply(1:nrow(tableStatus),function(z) prop.test(tableStatus[z,, drop = TRUE], n = colSums(tableStatus)))
tableSite = table(joinedTable$multisite,joinedTable$control_status,useNA = 'ifany')
tableSiteStats <- sapply(1:nrow(tableSite),function(z) prop.test(tableSite[z,, drop = TRUE], n = colSums(tableSite)))
tableFunder = table(joinedTable$fundingComb,joinedTable$control_status,useNA = 'ifany')
tableFunderStats <- sapply(1:nrow(tableFunder),function(z) prop.test(tableFunder[z,, drop = TRUE], n = colSums(tableFunder)))
tableFunder = table(joinedTable$fundingComb,joinedTable$control_status,useNA = 'ifany')
tableFunderStats <- sapply(1:nrow(tableFunder),function(z) prop.test(tableFunder[z,, drop = TRUE], n = colSums(tableFunder)))
# want to use total counts still for this one
tableUnivHosp = table(joinedTable$fundingComb,joinedTable$control_status,useNA = 'ifany')
tableUnivHospStats <- sapply(1:nrow(tableUnivHosp),function(z) prop.test(tableUnivHosp[z,, drop = TRUE], n = colSums(tableFunder)))
tablePub = table(joinedTable$pubCount,joinedTable$control_status,useNA = 'ifany')
tablePubStats <- sapply(1:nrow(tablePub),function(z) prop.test(tablePub[z,, drop = TRUE], n = colSums(tablePub)))
tableResults = table(joinedTable$fundingComb,joinedTable$control_status,useNA = 'ifany')
tableResultsStats <- sapply(1:nrow(tableResults),function(z) prop.test(tableResults[z,, drop = TRUE], n = colSums(tableResults)))
tableYearlyCount = table(joinedTable$yearStart,joinedTable$control_status,useNA='ifany')
tableYearlyCountStats <- sapply(1:nrow(tableYearCount),function(z) prop.test(tableYearlyCount[z,, drop = TRUE], n = colSums(tableYearlyCount)))
warnings()
tableYearlyCountStats <- sapply(1:nrow(tableYearlyCount),function(z) prop.test(tableYearlyCount[z,, drop = TRUE], n = colSums(tableYearlyCount)))
tablePub
tablePub = table(joinedTable$pubCountBool,joinedTable$control_status,useNA = 'ifany')
tablePubStats <- sapply(1:nrow(tablePub),function(z) prop.test(tablePub[z,, drop = TRUE], n = colSums(tablePub)))
View(tableCountryStats)
tableCountryStats
tableCountry
prop.test(c=(1099,711),c(controlN,noControlN))
prop.test(c(1099,711),c(controlN,noControlN))
install.packages("exact2x2")
library(exact2x2)
prop.test(c(1099,711),c(controlN,noControlN))
tableCountry
View(tableCountryStats)
tableCountryStats
tableControlArm
tablestatus
tableStatus
view(tableStatusStats)
View(tableStatusStats)
tableControlArmStats <- sapply(1:nrow(tableControlArm),function(z) pairwise.prop.test(tableControlArm[z,, drop = TRUE], n = colSums(tableControlArm)))
tableControlArmStats
tableCountryStats <- sapply(1:nrow(tableCountry),function(z) pairwise.prop.test(tableCountry[z,, drop = TRUE], n = colSums(tableCountry)))
tableCountryStats
tableCountryStats <- sapply(1:nrow(tableCountry),function(z) pairwise.prop.test(tableCountry[z,, drop = TRUE], n = colSums(tableCountry),p.adjust.method='bonferroni'))
tableCountryStats
prop.test(tableCountry)
chisq.test(tableControlArm)
chisq.test(tableCountry
)
chisq.test(tableSite)
chisq.test(tableFunder)
tableFunder
View(tableFunderStats)
tableFunderStats
tableFunder
tableUnivHosp
# want to use total counts still for this one
tableUnivHosp = table(joinedTable$univHosp,joinedTable$control_status,useNA = 'ifany')
tableUnivHospStats <- sapply(1:nrow(tableUnivHosp),function(z) prop.test(tableUnivHosp[z,, drop = TRUE], n = colSums(tableFunder)))
tableUnivHosp
152+1034+674
115+717+474
tableUnivHospStats <- sapply(1:nrow(tableUnivHosp),function(z) prop.test(tableUnivHosp[z,, drop = TRUE], n = colSums(tableUnivHosp)))
View(tableUnivHospStats)
tableUnivHospStats
tablePub
tablePubStats
View(tablePubStats)
tableResults
View(tableResultsStats)
tableResults = table(joinedTable$were_results_reported,joinedTable$control_status,useNA = 'ifany')
tableResultsStats <- sapply(1:nrow(tableResults),function(z) prop.test(tableResults[z,, drop = TRUE], n = colSums(tableResults)))
View(tableResultsStats)
tableResults
tableResultsStats <- sapply(1:nrow(tableResults),function(z) prop.test(tableResults[z,, drop = TRUE], n = colSums(tableResults)))
View(tableResultsStats)
tableResultsStats
View(tableResultsStats)
tableResults = table(joinedTable$were_results_reported,joinedTable$control_status,useNA = 'ifany')
tableResultsStats <- sapply(1:nrow(tableResults),function(z) prop.test(tableResults[z,, drop = TRUE], n = colSums(tableResults)))
tableResults
View(tableResultsStats)
tableStatus
tablePhase = table(joinedTable$phase_condensed,joinedTable$control_status,useNA = 'ifany')
tablePhaseStats <- sapply(1:nrow(tablePhase),function(z) prop.test(tablePhase[z,, drop = TRUE], n = colSums(tablePhase)))
tablePhase
View(tablePhaseStats)
tableSite
View(tableSiteStats)
prop.test(c(536,324),c(controlN,noControlN))
tableYearlyCount
view(tableYearlyCountStats)
View(tableYearlyCountStats)
tab_model(stat_model_group)
tab_model(stat_model)
joinedTableCount
tab_model(stat_model_group)
#########################################
# load libraries
library(tidyr)
library(RPostgreSQL)
library(plyr)
library(dplyr)
library(readr)
library(stringr)
library(lubridate)
library(ggplot2)
library(ggsci)
library(gridExtra)
library(cowplot)
library(here)
library(sjPlot)
library(coin)
library(emmeans)
#########################################
# boolean values for saving, username and password for accessing AACT database
savePlot = TRUE
saveData = TRUE
userAACT="djcald"
passwordAACT="DD968radford"
#########################################
# create search parameters
startDate = as.Date("2009-01-01")
endDate = as.Date("2019-12-31")
countriesList = c("United States")
`%nin%` = Negate(`%in%`)
placeboString = c('placebo','standard of care','usual care')
placeboStringOnly = c('placebo')
standardCareString = c('standard of care','usual care')
# terms to search within conditions field
diseaseTerms = tolower(c('Diabetes Mellitus', 'Noninsulin-Dependent', 'Diabetes Mellitus',
'Ketosis-Resistant', 'Diabetes Mellitus', 'Ketosis Resistant',
'Ketosis-Resistant Diabetes Mellitus', 'Diabetes Mellitus', 'Non Insulin Dependent',
'Diabetes Mellitus', 'Non-Insulin-Dependent', 'Non-Insulin-Dependent Diabetes Mellitus',
'Diabetes Mellitus, Stable', 'Stable Diabetes Mellitus', 'Diabetes Mellitus, Type II',
'NIDDM', 'Diabetes Mellitus, Noninsulin Dependent', 'Diabetes Mellitus',
'Maturity-Onset', 'Diabetes Mellitus', 'Maturity Onset',
'Maturity-Onset Diabetes Mellitus', 'Maturity Onset Diabetes Mellitus',
'MODY', 'Diabetes Mellitus, Slow-Onset', 'Diabetes Mellitus, Slow Onset',
'Slow-Onset Diabetes Mellitus', 'Type 2 Diabetes Mellitus',
'Noninsulin-Dependent Diabetes Mellitus',
'Noninsulin Dependent Diabetes Mellitus',
'Maturity-Onset Diabetes', 'Diabetes, Maturity-Onset',
'Maturity Onset Diabetes', 'Type 2 Diabetes', 'Diabetes, Type 2',
'Diabetes Mellitus, Adult-Onset', 'Adult-Onset Diabetes Mellitus',
'Diabetes Mellitus, Adult Onset'))
# terms to exclude
termsSearchCondTitleExclude = c('blahblahblah')
#########################################
# connect to database
drv <- dbDriver('PostgreSQL')
con <- dbConnect(drv, dbname="aact",host="aact-db.ctti-clinicaltrials.org",user=userAACT,password=passwordAACT,port=5432)
# begin loading, filtering, selecting tables
study_tbl_conditions = tbl(src=con, 'conditions')
condsCond <- study_tbl_conditions %>% select(nct_id,downcase_name) %>% filter(downcase_name %in% diseaseTerms) %>% collect
condsCond = condsCond %>% group_by(nct_id) %>% summarize(condsPaste = paste(downcase_name,collapse=", ")) %>% collect()
study_tbl = tbl(src=con,'studies')
#filter_dates <- study_tbl %>% select(official_title,study_first_posted_date,verification_date,start_date,start_month_year,nct_id,phase,last_known_status,study_type,enrollment,overall_status) %>% filter(study_type == 'Interventional')  %>% collect()
filter_dates <- study_tbl %>% select(official_title,study_first_posted_date,verification_date,start_date,start_month_year,nct_id,phase,last_known_status,study_type,enrollment,overall_status) %>% filter((start_date >= startDate) & (study_first_posted_date >= startDate) & (study_first_posted_date <= endDate)  & (study_type == 'Interventional'))  %>% collect()
filter_dates <- filter_dates %>%filter(nct_id %in% condsCond$nct_id) %>% mutate(phase = replace(phase, phase == "N/A", "Not Applicable"))
setwd("~/SharedCode/aact_others")
readRDS('diabetesRdata_11_11_2020.rds')
joinedTable <- readRDS('diabetesRdata_11_11_2020.rds')
# create column for phase
# done processing, now do checks, totals, and calculations
joinedTableCheck <- joinedTable %>% filter((multi_arm != 'Control Arm Present') & (!is.na(active_placebo)))
joinedTableActivePlacebo <- joinedTable %>% filter(control_status=='Control Arm Present') %>% group_by(active_placebo) %>% tally()
joinedTableWhichDesign <- joinedTable %>% filter(multi_arm=='Control Arm Present') %>% group_by(intervention_model) %>% tally()
joinedTableWhichDesignTrials <- joinedTable %>% filter(multi_arm=='Control Arm Present') %>% group_by(intervention_model)
joinedTableActivePlaceboCheck <- joinedTable %>% filter(multi_arm!='Control Arm Present') %>% group_by(active_placebo) %>% tally()
joinedTableWhichDesignCheck <- joinedTable %>% filter(multi_arm!='Control Arm Present') %>% group_by(intervention_model) %>% tally()
joinedTableActivePlaceboCheckNoCtrl <- joinedTable %>% filter(multi_arm=='No Control Arm Present') %>% group_by(active_placebo) %>% tally()
joinedTableWhichDesignCheckNoCtrl <- joinedTable %>% filter(multi_arm=='No Control Arm Present') %>% group_by(intervention_model) %>% tally()
joinedTableWhichDesignCheckNoCtrlTrials <- joinedTable %>% filter(multi_arm=='No Control Arm Present') %>% group_by(intervention_model)
joinedTableDoubleCheck <- joinedTable %>% filter((multi_arm != 'Control Arm Present') & ((active_placebo == 'Active & Placebo Present') | (active_placebo == 'Active Comparator') | (active_placebo == 'Placebo Comparator') ))
joinedTableTripleCheck <- joinedTable %>% filter((multi_arm == 'Control Arm Present') & (is.na(active_placebo)))
# check single arm
joinedTableSingleCheck <- joinedTable %>% filter((multi_arm == 'Single-Arm Trial') & ((intervention_model == "Parallel Assignment") | (intervention_model == 'Crossover Assignment')))
# group by year and multi-arm group
joinedTableCount <- joinedTable %>% group_by(yearStart,control_status) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCount <- rename(joinedTableCount,yearlyCount = n)
# calculate statistics
joinedTableTotals <- joinedTable %>% group_by(control_status) %>% tally()
controlN =  joinedTableTotals$n[joinedTableTotals$control_status == 'Control Arm Present']
noControlN = joinedTableTotals$n[joinedTableTotals$control_status == 'No Control Arm Present']
joinedTableSummarize <- joinedTable %>% group_by(control_status) %>% summarize(median=median(number_of_arms,na.rm=TRUE),iqr = IQR(number_of_arms,na.rm=TRUE))
joinedTableSummarizeCountry <- joinedTable %>% group_by(control_status,usaLoc) %>% tally()
joinedTableSummarizeCountry <- joinedTableSummarizeCountry %>% mutate(totalN = case_when(control_status=='Control Arm Present' ~ controlN ,
control_status=='No Control Arm Present' ~ noControlN))
joinedTableSummarizeType <- joinedTable %>% group_by(control_status,study_type) %>% tally()
joinedTableSummarizePhase <- joinedTable %>% group_by(control_status,phase_condensed) %>% tally()
joinedTableSummarizePhaseMore <- joinedTable %>% group_by(control_status,phase) %>% tally()
joinedTableSummarizeAgency <- joinedTable %>% group_by(control_status,fundingComb) %>% tally()
joinedTableSummarizeReported <- joinedTable %>% group_by(control_status,were_results_reported) %>% tally()
joinedTableSummarizeSite<- joinedTable %>% group_by(control_status,multisite) %>% tally()
joinedTableSummarizeStatus<- joinedTable %>% group_by(control_status,last_known_status) %>% tally()
joinedTableSummarizeOverallStatus <- joinedTable %>% group_by(control_status,status_condensed) %>% tally()
joinedTableSummarizePubCount <- joinedTable %>% group_by(control_status,pubCountBool) %>% tally()
joinedTableMedianNumbers <- joinedTable %>% filter(enrollment>0) %>% group_by(control_status) %>% summarize(median=median(enrollment,na.rm=TRUE),iqr = IQR(enrollment,na.rm=TRUE))
joinedTableUnivHosp <- joinedTable %>% filter((univHosp %in% c('University','Hospital')) & fundingComb == 'Other') %>% group_by(control_status,univHosp) %>% tally()
#########################################
# statistical testing
# group by year and multi-arm group
joinedTableCountCat <- joinedTable %>% mutate(yearStart = as.factor(yearStart)) %>% group_by(yearStart,control_status) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCountCat <- rename(joinedTableCountCat,yearlyCount = n)
joinedTableCat <- joinedTable %>% mutate(yearStart = as.factor(yearStart)) %>%
mutate(control_status = recode(control_status,"No Control Arm Present" = 0,"Control Arm Present"=1))
stat_model_cat <- glm(control_status~yearStart,data=joinedTableCat,family=binomial(link="logit"))
summary(stat_model_cat)
confint(stat_model_cat)
emmeansModel <- emmeans(stat_model_cat,'yearStart',type='response')
pairs(emmeansModel,reverse=TRUE)
confint(emmeansModel)
joinedTableSampleSizeTest <- joinedTable %>% filter(enrollment>0) %>% select(control_status,yearStart,enrollment,multisite,status_condensed,usaLoc,fundingComb,phase,phase_condensed)
joinedTableSampleSizeTest$control_status <- as.factor(mapvalues(joinedTableSampleSizeTest$control_status,from=c('Control Arm Present','No Control Arm Present'),to=c(1,0)))
joinedTableSampleSizeTest$yearStart <- as.integer(mapvalues(joinedTableSampleSizeTest$yearStart,from=c(min(joinedTableSampleSizeTest$yearStart):max(joinedTableSampleSizeTest$yearStart)),to=c(0:(length(unique(joinedTableSampleSizeTest$yearStart))-1))))
which(! complete.cases(joinedTableSampleSizeTest))
medianSampleSize <- median_test(enrollment~control_status,data = joinedTableSampleSizeTest)
yearlyCount = joinedTableCount$yearlyCount
lengthYC= length(yearlyCount)
stat_model <- glm(control_status~yearStart,family=binomial(link="logit"),data=joinedTableSampleSizeTest)
summary(stat_model)
confint(stat_model)
tab_model(stat_model)
stat_model_group <- glm(control_status~yearStart+multisite+status_condensed+usaLoc+phase_condensed+fundingComb,family=binomial(link="logit"),data=joinedTableSampleSizeTest)
summary(stat_model_group)
tab_model(stat_model_group)
anova(stat_model_group,test="Chisq")
confint(stat_model_group)
tableCountry = table(joinedTable$usaLoc,joinedTable$control_status,useNA = 'ifany')
tableCountryStats <- sapply(1:nrow(tableCountry),function(z) prop.test(tableCountry[z,, drop = TRUE], n = colSums(tableCountry)))
chisq.test(tableCountry)
tableControlArm = table(joinedTable$active_placebo,joinedTable$control_status,useNA='ifany')
tableControlArmStats <- sapply(1:nrow(tableControlArm),function(z) prop.test(tableControlArm[z,, drop = TRUE], n = colSums(tableControlArm)))
tableStatus = table(joinedTable$status_condensed,joinedTable$control_status,useNA = 'ifany')
tableStatusStats <- sapply(1:nrow(tableStatus),function(z) prop.test(tableStatus[z,, drop = TRUE], n = colSums(tableStatus)))
chisq.test(tableStatus)
tableSite = table(joinedTable$multisite,joinedTable$control_status,useNA = 'ifany')
Table[is.na(data_1)] <- 0
tableSiteStats <- sapply(1:nrow(tableSite),function(z) prop.test(tableSite[z,, drop = TRUE], n = colSums(tableSite)))
chisq.test(tableSite)
tableFunder = table(joinedTable$fundingComb,joinedTable$control_status,useNA = 'ifany')
tableFunderStats <- sapply(1:nrow(tableFunder),function(z) prop.test(tableFunder[z,, drop = TRUE], n = colSums(tableFunder)))
chisq.test(tableFunder)
tablePhase = table(joinedTable$phase_condensed,joinedTable$control_status,useNA = 'ifany')
tablePhaseStats <- sapply(1:nrow(tablePhase),function(z) prop.test(tablePhase[z,, drop = TRUE], n = colSums(tablePhase)))
chisq.test(tablePhase)
tablePub = table(joinedTable$pubCountBool,joinedTable$control_status,useNA = 'ifany')
tablePubStats <- sapply(1:nrow(tablePub),function(z) prop.test(tablePub[z,, drop = TRUE], n = colSums(tablePub)))
chisq.test(tablePub)
tableResults = table(joinedTable$were_results_reported,joinedTable$control_status,useNA = 'ifany')
tableResultsStats <- sapply(1:nrow(tableResults),function(z) prop.test(tableResults[z,, drop = TRUE], n = colSums(tableResults)))
chisq.test(tableResults)
tableYearlyCount = table(joinedTable$yearStart,joinedTable$control_status,useNA='ifany')
tableYearlyCountStats <- sapply(1:nrow(tableYearlyCount),function(z) prop.test(tableYearlyCount[z,, drop = TRUE], n = colSums(tableYearlyCount)))
chisq.test(tableYearlyCount)
#########################################
# load libraries
library(tidyr)
library(RPostgreSQL)
library(plyr)
library(dplyr)
library(readr)
library(stringr)
library(lubridate)
library(ggplot2)
library(ggsci)
library(gridExtra)
library(cowplot)
library(here)
library(sjPlot)
library(coin)
library(emmeans)
#########################################
# boolean values for saving, username and password for accessing AACT database
savePlot = TRUE
saveData = TRUE
userAACT="djcald"
passwordAACT="DD968radford"
#########################################
# create search parameters
startDate = as.Date("2009-01-01")
endDate = as.Date("2019-12-31")
countriesList = c("United States")
`%nin%` = Negate(`%in%`)
placeboString = c('placebo','standard of care','usual care')
placeboStringOnly = c('placebo')
standardCareString = c('standard of care','usual care')
# create column for phase
# done processing, now do checks, totals, and calculations
joinedTableCheck <- joinedTable %>% filter((multi_arm != 'Control Arm Present') & (!is.na(active_placebo)))
joinedTableActivePlacebo <- joinedTable %>% filter(control_status=='Control Arm Present') %>% group_by(active_placebo) %>% tally()
joinedTableWhichDesign <- joinedTable %>% filter(multi_arm=='Control Arm Present') %>% group_by(intervention_model) %>% tally()
joinedTableWhichDesignTrials <- joinedTable %>% filter(multi_arm=='Control Arm Present') %>% group_by(intervention_model)
joinedTableActivePlaceboCheck <- joinedTable %>% filter(multi_arm!='Control Arm Present') %>% group_by(active_placebo) %>% tally()
joinedTableWhichDesignCheck <- joinedTable %>% filter(multi_arm!='Control Arm Present') %>% group_by(intervention_model) %>% tally()
joinedTableActivePlaceboCheckNoCtrl <- joinedTable %>% filter(multi_arm=='No Control Arm Present') %>% group_by(active_placebo) %>% tally()
joinedTableWhichDesignCheckNoCtrl <- joinedTable %>% filter(multi_arm=='No Control Arm Present') %>% group_by(intervention_model) %>% tally()
joinedTableWhichDesignCheckNoCtrlTrials <- joinedTable %>% filter(multi_arm=='No Control Arm Present') %>% group_by(intervention_model)
joinedTableDoubleCheck <- joinedTable %>% filter((multi_arm != 'Control Arm Present') & ((active_placebo == 'Active & Placebo Present') | (active_placebo == 'Active Comparator') | (active_placebo == 'Placebo Comparator') ))
joinedTableTripleCheck <- joinedTable %>% filter((multi_arm == 'Control Arm Present') & (is.na(active_placebo)))
# check single arm
joinedTableSingleCheck <- joinedTable %>% filter((multi_arm == 'Single-Arm Trial') & ((intervention_model == "Parallel Assignment") | (intervention_model == 'Crossover Assignment')))
# group by year and multi-arm group
joinedTableCount <- joinedTable %>% group_by(yearStart,control_status) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCount <- rename(joinedTableCount,yearlyCount = n)
# calculate statistics
joinedTableTotals <- joinedTable %>% group_by(control_status) %>% tally()
controlN =  joinedTableTotals$n[joinedTableTotals$control_status == 'Control Arm Present']
noControlN = joinedTableTotals$n[joinedTableTotals$control_status == 'No Control Arm Present']
joinedTableSummarize <- joinedTable %>% group_by(control_status) %>% summarize(median=median(number_of_arms,na.rm=TRUE),iqr = IQR(number_of_arms,na.rm=TRUE))
joinedTableSummarizeCountry <- joinedTable %>% group_by(control_status,usaLoc) %>% tally()
joinedTableSummarizeCountry <- joinedTableSummarizeCountry %>% mutate(totalN = case_when(control_status=='Control Arm Present' ~ controlN ,
control_status=='No Control Arm Present' ~ noControlN))
joinedTableSummarizeType <- joinedTable %>% group_by(control_status,study_type) %>% tally()
joinedTableSummarizePhase <- joinedTable %>% group_by(control_status,phase_condensed) %>% tally()
joinedTableSummarizePhaseMore <- joinedTable %>% group_by(control_status,phase) %>% tally()
joinedTableSummarizeAgency <- joinedTable %>% group_by(control_status,fundingComb) %>% tally()
joinedTableSummarizeReported <- joinedTable %>% group_by(control_status,were_results_reported) %>% tally()
joinedTableSummarizeSite<- joinedTable %>% group_by(control_status,multisite) %>% tally()
joinedTableSummarizeStatus<- joinedTable %>% group_by(control_status,last_known_status) %>% tally()
joinedTableSummarizeOverallStatus <- joinedTable %>% group_by(control_status,status_condensed) %>% tally()
joinedTableSummarizePubCount <- joinedTable %>% group_by(control_status,pubCountBool) %>% tally()
joinedTableMedianNumbers <- joinedTable %>% filter(enrollment>0) %>% group_by(control_status) %>% summarize(median=median(enrollment,na.rm=TRUE),iqr = IQR(enrollment,na.rm=TRUE))
joinedTableUnivHosp <- joinedTable %>% filter((univHosp %in% c('University','Hospital')) & fundingComb == 'Other') %>% group_by(control_status,univHosp) %>% tally()
#########################################
# statistical testing
# group by year and multi-arm group
joinedTableCountCat <- joinedTable %>% mutate(yearStart = as.factor(yearStart)) %>% group_by(yearStart,control_status) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCountCat <- rename(joinedTableCountCat,yearlyCount = n)
joinedTableCat <- joinedTable %>% mutate(yearStart = as.factor(yearStart)) %>%
mutate(control_status = recode(control_status,"No Control Arm Present" = 0,"Control Arm Present"=1))
stat_model_cat <- glm(control_status~yearStart,data=joinedTableCat,family=binomial(link="logit"))
summary(stat_model_cat)
confint(stat_model_cat)
emmeansModel <- emmeans(stat_model_cat,'yearStart',type='response')
pairs(emmeansModel,reverse=TRUE)
confint(emmeansModel)
joinedTableSampleSizeTest <- joinedTable %>% filter(enrollment>0) %>% select(control_status,yearStart,enrollment,multisite,status_condensed,usaLoc,fundingComb,phase,phase_condensed)
joinedTableSampleSizeTest$control_status <- as.factor(mapvalues(joinedTableSampleSizeTest$control_status,from=c('Control Arm Present','No Control Arm Present'),to=c(1,0)))
joinedTableSampleSizeTest$yearStart <- as.integer(mapvalues(joinedTableSampleSizeTest$yearStart,from=c(min(joinedTableSampleSizeTest$yearStart):max(joinedTableSampleSizeTest$yearStart)),to=c(0:(length(unique(joinedTableSampleSizeTest$yearStart))-1))))
which(! complete.cases(joinedTableSampleSizeTest))
medianSampleSize <- median_test(enrollment~control_status,data = joinedTableSampleSizeTest)
yearlyCount = joinedTableCount$yearlyCount
lengthYC= length(yearlyCount)
stat_model <- glm(control_status~yearStart,family=binomial(link="logit"),data=joinedTableSampleSizeTest)
summary(stat_model)
confint(stat_model)
tab_model(stat_model)
stat_model_group <- glm(control_status~yearStart+multisite+status_condensed+usaLoc+phase_condensed+fundingComb,family=binomial(link="logit"),data=joinedTableSampleSizeTest)
summary(stat_model_group)
tab_model(stat_model_group)
anova(stat_model_group,test="Chisq")
confint(stat_model_group)
tableCountry = table(joinedTable$usaLoc,joinedTable$control_status,useNA = 'ifany')
tableCountryStats <- sapply(1:nrow(tableCountry),function(z) prop.test(tableCountry[z,, drop = TRUE], n = colSums(tableCountry)))
chisq.test(tableCountry)
tableControlArm = table(joinedTable$active_placebo,joinedTable$control_status,useNA='ifany')
tableControlArmStats <- sapply(1:nrow(tableControlArm),function(z) prop.test(tableControlArm[z,, drop = TRUE], n = colSums(tableControlArm)))
tableStatus = table(joinedTable$status_condensed,joinedTable$control_status,useNA = 'ifany')
tableStatusStats <- sapply(1:nrow(tableStatus),function(z) prop.test(tableStatus[z,, drop = TRUE], n = colSums(tableStatus)))
chisq.test(tableStatus)
tableSite = table(joinedTable$multisite,joinedTable$control_status,useNA = 'ifany')
Table[is.na(data_1)] <- 0
tableSiteStats <- sapply(1:nrow(tableSite),function(z) prop.test(tableSite[z,, drop = TRUE], n = colSums(tableSite)))
chisq.test(tableSite)
tableFunder = table(joinedTable$fundingComb,joinedTable$control_status,useNA = 'ifany')
tableFunderStats <- sapply(1:nrow(tableFunder),function(z) prop.test(tableFunder[z,, drop = TRUE], n = colSums(tableFunder)))
chisq.test(tableFunder)
tablePhase = table(joinedTable$phase_condensed,joinedTable$control_status,useNA = 'ifany')
tablePhaseStats <- sapply(1:nrow(tablePhase),function(z) prop.test(tablePhase[z,, drop = TRUE], n = colSums(tablePhase)))
chisq.test(tablePhase)
tablePub = table(joinedTable$pubCountBool,joinedTable$control_status,useNA = 'ifany')
tablePubStats <- sapply(1:nrow(tablePub),function(z) prop.test(tablePub[z,, drop = TRUE], n = colSums(tablePub)))
chisq.test(tablePub)
tableResults = table(joinedTable$were_results_reported,joinedTable$control_status,useNA = 'ifany')
tableResultsStats <- sapply(1:nrow(tableResults),function(z) prop.test(tableResults[z,, drop = TRUE], n = colSums(tableResults)))
chisq.test(tableResults)
tableYearlyCount = table(joinedTable$yearStart,joinedTable$control_status,useNA='ifany')
tableYearlyCountStats <- sapply(1:nrow(tableYearlyCount),function(z) prop.test(tableYearlyCount[z,, drop = TRUE], n = colSums(tableYearlyCount)))
chisq.test(tableYearlyCount)
joinedTableTotals
joinedTableActivePlacebo
895+1581
641+686+252
641+686+254
medianSampleSize
joinedTableSampleSizeTest
joinedTableTotals
joinedTableSummarize
joinedTableMedianNumbers
joinedTable$enrollment
median(joinedTable$enrollment)
median(joinedTable %>% filter(enrollment>0) %>% select(enrollment))
median(joinedTable %>% filter(enrollment>0) %>% select(enrollment) %>% collect())
a <- joinedTable %>% filter(enrollment >0) %>% select(enrollment)
a
median(a)
median(c(a))
View(a)
median(a$enrollment)
joinedTable$control_status
median(joinedTable %>% filter((enrollment>0) & (control_status='Control Arm Present')) %>% select(enrollment) %>% collect())
median(joinedTable %>% filter((enrollment>0) & (control_status=='Control Arm Present')) %>% select(enrollment) %>% collect())
a<- joinedTable %>% filter((enrollment>0) & (control_status=='Control Arm Present')) %>% select(enrollment) %>% collect()
median(a$enrollment)
joinedTableMedianNumbers
tableCountry
tableStatus
tableSTatus
tableStatus
chisq.test(tableSite)
chisq.test(tableStatus)
tableSite
486/(921+174)
tableSiteStats
tableSite
chisq.test(tableSite)
486/(921+174+486)
tableSite
164/(658+164+73)
tablePhase
tableCountry
chisq.test(tableCountry)
chisq.test(tablePhase)
tablePhase
tableFunder
chisq.test(tableFunder)
joinedTableUnivHosp
tableResults
chisq.test(tableResults)
364/(1217+364)
119/(119+776)
tablePub
chisq.test(tablePub)
joinedTableCountCat
print(joinedTableCount,n=40)
stat_model_cat
yearlyCount = joinedTableCount$yearlyCount
yearlyCount
joinedTableCountCat <- joinedTable %>% mutate(yearStart = as.factor(yearStart)) %>% group_by(yearStart) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCountCat
summary(stat_model_cat)
tab_model(stat_model_cat)
exp(-0.43)
confint(emmeansModel)
pairs(emmeansModel,reverse=TRUE)
confint(stat_model_cat)
summary(stat_model_cat)
confint(stat_model_cat)
exp(-1.1909606)
exp(-0.308061009)
241+64+590
388+135+1058
290+535+6+84
290+535+6+64
420+898+155+108
143+143+54+91+564
163+223+325+320+550
tableCountry
tablePhase
564+143+43+54+91
163+223+325+320+550
60+310+525
93+764+724
641+686+252
641+686+254
