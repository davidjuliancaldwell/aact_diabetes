a[1]
a[2]
a[4]
a[6]
str(a)
sapply(a,"[[","conf.int")
a
a$conf.int
tableCountry = table(joinedTable$usaLoc,joinedTable$control_status,useNA = 'ifany')
tableCountryStats <- sapply(1:nrow(tableCountry),function(z) prop.test(tableCountry[z,, drop = TRUE], n = colSums(tableCountry)))
tableControlArm = table(joinedTableSubset$active_placebo,joinedTableSubset$control_status,useNA='ifany')
tableControlArmStats <- sapply(1:nrow(tableControlArm),function(z) prop.test(tableControlArm[z,, drop = TRUE], n = colSums(tableControlArm)))
tableCountry = table(joinedTable$usaLoc,joinedTable$control_status,useNA = 'ifany')
tableCountryStats <- sapply(1:nrow(tableCountry),function(z) prop.test(tableCountry[z,, drop = TRUE], n = colSums(tableCountry)))
tableControlArm = table(joinedTable$active_placebo,joinedTable$control_status,useNA='ifany')
tableControlArmStats <- sapply(1:nrow(tableControlArm),function(z) prop.test(tableControlArm[z,, drop = TRUE], n = colSums(tableControlArm)))
tableControlArmStats
tableControlArmStats[,3]
tidy(tableCountryStats)
tibble
tibble::as_tibble(tableCountryStats)
tibble::enframe(tableCountryStats)
joinedTableCount
joinedTable$pubCount
joinedTable$pubCountBool
joinedTableSummarizePubCount
joinedTableSummarizeReported
tableCountry = table(joinedTable$usaLoc,joinedTable$control_status,useNA = 'ifany')
tableCountryStats <- sapply(1:nrow(tableCountry),function(z) prop.test(tableCountry[z,, drop = TRUE], n = colSums(tableCountry)))
tableControlArm = table(joinedTable$active_placebo,joinedTable$control_status,useNA='ifany')
tableControlArmStats <- sapply(1:nrow(tableControlArm),function(z) prop.test(tableControlArm[z,, drop = TRUE], n = colSums(tableControlArm)))
tableStatus = table(joinedTable$status_condensed,joinedTable$control_status,useNA = 'ifany')
tableStatusStats <- sapply(1:nrow(tableStatus),function(z) prop.test(tableStatus[z,, drop = TRUE], n = colSums(tableStatus)))
tableSite = table(joinedTable$multisite,joinedTable$control_status,useNA = 'ifany')
tableSiteStats <- sapply(1:nrow(tableSite),function(z) prop.test(tableSite[z,, drop = TRUE], n = colSums(tableSite)))
tableFunder = table(joinedTable$fundingComb,joinedTable$control_status,useNA = 'ifany')
tableFunderStats <- sapply(1:nrow(tableFunder),function(z) prop.test(tableFunder[z,, drop = TRUE], n = colSums(tableFunder)))
tableFunder = table(joinedTable$fundingComb,joinedTable$control_status,useNA = 'ifany')
tableFunderStats <- sapply(1:nrow(tableFunder),function(z) prop.test(tableFunder[z,, drop = TRUE], n = colSums(tableFunder)))
# want to use total counts still for this one
tableUnivHosp = table(joinedTable$fundingComb,joinedTable$control_status,useNA = 'ifany')
tableUnivHospStats <- sapply(1:nrow(tableUnivHosp),function(z) prop.test(tableUnivHosp[z,, drop = TRUE], n = colSums(tableFunder)))
tablePub = table(joinedTable$pubCount,joinedTable$control_status,useNA = 'ifany')
tablePubStats <- sapply(1:nrow(tablePub),function(z) prop.test(tablePub[z,, drop = TRUE], n = colSums(tablePub)))
tableResults = table(joinedTable$fundingComb,joinedTable$control_status,useNA = 'ifany')
tableResultsStats <- sapply(1:nrow(tableResults),function(z) prop.test(tableResults[z,, drop = TRUE], n = colSums(tableResults)))
tableYearlyCount = table(joinedTable$yearStart,joinedTable$control_status,useNA='ifany')
tableYearlyCountStats <- sapply(1:nrow(tableYearCount),function(z) prop.test(tableYearlyCount[z,, drop = TRUE], n = colSums(tableYearlyCount)))
warnings()
tableYearlyCountStats <- sapply(1:nrow(tableYearlyCount),function(z) prop.test(tableYearlyCount[z,, drop = TRUE], n = colSums(tableYearlyCount)))
tablePub
tablePub = table(joinedTable$pubCountBool,joinedTable$control_status,useNA = 'ifany')
tablePubStats <- sapply(1:nrow(tablePub),function(z) prop.test(tablePub[z,, drop = TRUE], n = colSums(tablePub)))
View(tableCountryStats)
tableCountryStats
tableCountry
prop.test(c=(1099,711),c(controlN,noControlN))
prop.test(c(1099,711),c(controlN,noControlN))
install.packages("exact2x2")
library(exact2x2)
prop.test(c(1099,711),c(controlN,noControlN))
tableCountry
View(tableCountryStats)
tableCountryStats
tableControlArm
tablestatus
tableStatus
view(tableStatusStats)
View(tableStatusStats)
tableControlArmStats <- sapply(1:nrow(tableControlArm),function(z) pairwise.prop.test(tableControlArm[z,, drop = TRUE], n = colSums(tableControlArm)))
tableControlArmStats
tableCountryStats <- sapply(1:nrow(tableCountry),function(z) pairwise.prop.test(tableCountry[z,, drop = TRUE], n = colSums(tableCountry)))
tableCountryStats
tableCountryStats <- sapply(1:nrow(tableCountry),function(z) pairwise.prop.test(tableCountry[z,, drop = TRUE], n = colSums(tableCountry),p.adjust.method='bonferroni'))
tableCountryStats
prop.test(tableCountry)
chisq.test(tableControlArm)
chisq.test(tableCountry
)
chisq.test(tableSite)
chisq.test(tableFunder)
tableFunder
View(tableFunderStats)
tableFunderStats
tableFunder
tableUnivHosp
# want to use total counts still for this one
tableUnivHosp = table(joinedTable$univHosp,joinedTable$control_status,useNA = 'ifany')
tableUnivHospStats <- sapply(1:nrow(tableUnivHosp),function(z) prop.test(tableUnivHosp[z,, drop = TRUE], n = colSums(tableFunder)))
tableUnivHosp
152+1034+674
115+717+474
tableUnivHospStats <- sapply(1:nrow(tableUnivHosp),function(z) prop.test(tableUnivHosp[z,, drop = TRUE], n = colSums(tableUnivHosp)))
View(tableUnivHospStats)
tableUnivHospStats
tablePub
tablePubStats
View(tablePubStats)
tableResults
View(tableResultsStats)
tableResults = table(joinedTable$were_results_reported,joinedTable$control_status,useNA = 'ifany')
tableResultsStats <- sapply(1:nrow(tableResults),function(z) prop.test(tableResults[z,, drop = TRUE], n = colSums(tableResults)))
View(tableResultsStats)
tableResults
tableResultsStats <- sapply(1:nrow(tableResults),function(z) prop.test(tableResults[z,, drop = TRUE], n = colSums(tableResults)))
View(tableResultsStats)
tableResultsStats
View(tableResultsStats)
tableResults = table(joinedTable$were_results_reported,joinedTable$control_status,useNA = 'ifany')
tableResultsStats <- sapply(1:nrow(tableResults),function(z) prop.test(tableResults[z,, drop = TRUE], n = colSums(tableResults)))
tableResults
View(tableResultsStats)
tableStatus
tablePhase = table(joinedTable$phase_condensed,joinedTable$control_status,useNA = 'ifany')
tablePhaseStats <- sapply(1:nrow(tablePhase),function(z) prop.test(tablePhase[z,, drop = TRUE], n = colSums(tablePhase)))
tablePhase
View(tablePhaseStats)
tableSite
View(tableSiteStats)
prop.test(c(536,324),c(controlN,noControlN))
tableYearlyCount
view(tableYearlyCountStats)
View(tableYearlyCountStats)
tab_model(stat_model_group)
tab_model(stat_model)
joinedTableCount
tab_model(stat_model_group)
#########################################
# load libraries
library(tidyr)
library(RPostgreSQL)
library(plyr)
library(dplyr)
library(readr)
library(stringr)
library(lubridate)
library(ggplot2)
library(ggsci)
library(gridExtra)
library(cowplot)
library(here)
library(sjPlot)
library(coin)
library(emmeans)
#########################################
# boolean values for saving, username and password for accessing AACT database
savePlot = TRUE
saveData = TRUE
userAACT="djcald"
passwordAACT="DD968radford"
#########################################
# create search parameters
startDate = as.Date("2009-01-01")
endDate = as.Date("2019-12-31")
countriesList = c("United States")
`%nin%` = Negate(`%in%`)
placeboString = c('placebo','standard of care','usual care')
placeboStringOnly = c('placebo')
standardCareString = c('standard of care','usual care')
# terms to search within conditions field
diseaseTerms = tolower(c('Diabetes Mellitus', 'Noninsulin-Dependent', 'Diabetes Mellitus',
'Ketosis-Resistant', 'Diabetes Mellitus', 'Ketosis Resistant',
'Ketosis-Resistant Diabetes Mellitus', 'Diabetes Mellitus', 'Non Insulin Dependent',
'Diabetes Mellitus', 'Non-Insulin-Dependent', 'Non-Insulin-Dependent Diabetes Mellitus',
'Diabetes Mellitus, Stable', 'Stable Diabetes Mellitus', 'Diabetes Mellitus, Type II',
'NIDDM', 'Diabetes Mellitus, Noninsulin Dependent', 'Diabetes Mellitus',
'Maturity-Onset', 'Diabetes Mellitus', 'Maturity Onset',
'Maturity-Onset Diabetes Mellitus', 'Maturity Onset Diabetes Mellitus',
'MODY', 'Diabetes Mellitus, Slow-Onset', 'Diabetes Mellitus, Slow Onset',
'Slow-Onset Diabetes Mellitus', 'Type 2 Diabetes Mellitus',
'Noninsulin-Dependent Diabetes Mellitus',
'Noninsulin Dependent Diabetes Mellitus',
'Maturity-Onset Diabetes', 'Diabetes, Maturity-Onset',
'Maturity Onset Diabetes', 'Type 2 Diabetes', 'Diabetes, Type 2',
'Diabetes Mellitus, Adult-Onset', 'Adult-Onset Diabetes Mellitus',
'Diabetes Mellitus, Adult Onset'))
# terms to exclude
termsSearchCondTitleExclude = c('blahblahblah')
#########################################
# connect to database
drv <- dbDriver('PostgreSQL')
con <- dbConnect(drv, dbname="aact",host="aact-db.ctti-clinicaltrials.org",user=userAACT,password=passwordAACT,port=5432)
# begin loading, filtering, selecting tables
study_tbl_conditions = tbl(src=con, 'conditions')
condsCond <- study_tbl_conditions %>% select(nct_id,downcase_name) %>% filter(downcase_name %in% diseaseTerms) %>% collect
condsCond = condsCond %>% group_by(nct_id) %>% summarize(condsPaste = paste(downcase_name,collapse=", ")) %>% collect()
study_tbl = tbl(src=con,'studies')
#filter_dates <- study_tbl %>% select(official_title,study_first_posted_date,verification_date,start_date,start_month_year,nct_id,phase,last_known_status,study_type,enrollment,overall_status) %>% filter(study_type == 'Interventional')  %>% collect()
filter_dates <- study_tbl %>% select(official_title,study_first_posted_date,verification_date,start_date,start_month_year,nct_id,phase,last_known_status,study_type,enrollment,overall_status) %>% filter((start_date >= startDate) & (study_first_posted_date >= startDate) & (study_first_posted_date <= endDate)  & (study_type == 'Interventional'))  %>% collect()
filter_dates <- filter_dates %>%filter(nct_id %in% condsCond$nct_id) %>% mutate(phase = replace(phase, phase == "N/A", "Not Applicable"))
setwd("~/SharedCode/aact_diabetes")
#########################################
# load libraries
library(tidyr)
library(RPostgreSQL)
library(plyr)
library(dplyr)
library(readr)
library(stringr)
library(lubridate)
library(ggplot2)
library(ggsci)
library(gridExtra)
library(cowplot)
library(here)
library(sjPlot)
library(coin)
library(emmeans)
#########################################
# boolean values for saving, username and password for accessing AACT database
savePlot = TRUE
saveData = TRUE
userAACT="djcald"
passwordAACT="DD968radford"
#########################################
# create search parameters
startDate = as.Date("2009-01-01")
endDate = as.Date("2019-12-31")
countriesList = c("United States")
`%nin%` = Negate(`%in%`)
placeboString = c('placebo','standard of care','usual care')
placeboStringOnly = c('placebo')
standardCareString = c('standard of care','usual care')
# terms to search within conditions field
diseaseTerms = tolower(c('Diabetes Mellitus', 'Noninsulin-Dependent', 'Diabetes Mellitus',
'Ketosis-Resistant', 'Diabetes Mellitus', 'Ketosis Resistant',
'Ketosis-Resistant Diabetes Mellitus', 'Diabetes Mellitus', 'Non Insulin Dependent',
'Diabetes Mellitus', 'Non-Insulin-Dependent', 'Non-Insulin-Dependent Diabetes Mellitus',
'Diabetes Mellitus, Stable', 'Stable Diabetes Mellitus', 'Diabetes Mellitus, Type II',
'NIDDM', 'Diabetes Mellitus, Noninsulin Dependent', 'Diabetes Mellitus',
'Maturity-Onset', 'Diabetes Mellitus', 'Maturity Onset',
'Maturity-Onset Diabetes Mellitus', 'Maturity Onset Diabetes Mellitus',
'MODY', 'Diabetes Mellitus, Slow-Onset', 'Diabetes Mellitus, Slow Onset',
'Slow-Onset Diabetes Mellitus', 'Type 2 Diabetes Mellitus',
'Noninsulin-Dependent Diabetes Mellitus',
'Noninsulin Dependent Diabetes Mellitus',
'Maturity-Onset Diabetes', 'Diabetes, Maturity-Onset',
'Maturity Onset Diabetes', 'Type 2 Diabetes', 'Diabetes, Type 2',
'Diabetes Mellitus, Adult-Onset', 'Adult-Onset Diabetes Mellitus',
'Diabetes Mellitus, Adult Onset'))
# terms to exclude
termsSearchCondTitleExclude = c('blahblahblah')
#########################################
# connect to database
drv <- dbDriver('PostgreSQL')
con <- dbConnect(drv, dbname="aact",host="aact-db.ctti-clinicaltrials.org",user=userAACT,password=passwordAACT,port=5432)
# begin loading, filtering, selecting tables
study_tbl_conditions = tbl(src=con, 'conditions')
# exact string matching original way
condsCond <- study_tbl_conditions %>% select(nct_id,downcase_name)  %>% filter(downcase_name %in% diseaseTerms) %>% collect
condsCond = condsCond %>% group_by(nct_id) %>% summarize(condsPaste = paste(downcase_name,collapse=", ")) %>% collect()
# match any substring, less specific
#condsCond <- study_tbl_conditions %>% select(nct_id,downcase_name) %>% collect()
#condsCond <- condsCond %>% group_by(nct_id) %>% summarize(condsPaste = paste(downcase_name,collapse=", ")) %>% collect()
#condsCond <- condsCond %>% filter(str_detect(tolower(condsPaste),pattern = paste(diseaseTerms,collapse="|")) & !str_detect(tolower(condsPaste),pattern = paste(termsSearchCondTitleExclude,collapse="|")))
#study_tbl_conditions_other = tbl(src=con, 'browse_conditions')
#condsCond_other <- study_tbl_conditions_other %>% select(nct_id,mesh_term) %>% collect
#condsCond_other = condsCond_other %>% group_by(nct_id) %>% summarize(condsPaste = paste(mesh_term,collapse=", ")) %>% collect()
study_tbl = tbl(src=con,'studies')
#filter_dates <- study_tbl %>% select(official_title,study_first_posted_date,verification_date,start_date,start_month_year,nct_id,phase,last_known_status,study_type,enrollment,overall_status) %>% filter(study_type == 'Interventional')  %>% collect()
filter_dates <- study_tbl %>% select(official_title,study_first_posted_date,verification_date,start_date,start_month_year,nct_id,phase,last_known_status,study_type,enrollment,overall_status) %>% filter((start_date >= startDate) & (study_first_posted_date >= startDate) & (study_first_posted_date <= endDate)  & (study_type == 'Interventional'))  %>% collect()
filter_dates <- filter_dates %>%filter(nct_id %in% condsCond$nct_id) %>% mutate(phase = replace(phase, phase == "N/A", "Not Applicable"))
# update overall status with last known status
filter_dates <- filter_dates %>% mutate(overall_status = case_when(!is.na(last_known_status) ~ last_known_status,
TRUE ~ overall_status))
# search within title
trials_excluded_title <- filter_dates %>% filter(str_detect(tolower(official_title),pattern = paste(termsSearchCondTitleExclude,collapse="|")))
filter_dates <- filter_dates %>% filter(!str_detect(tolower(official_title),pattern = paste(termsSearchCondTitleExclude,collapse="|")))
# search within brief summary
brief_summaries_tbl = tbl(src=con,"brief_summaries")
brief_summaries = brief_summaries_tbl %>% select(nct_id,description) %>% collect()
brief_summaries <- brief_summaries %>% filter(nct_id %in% filter_dates$nct_id)
trials_excluded_summary <- brief_summaries %>% filter(str_detect(tolower(description),pattern = paste(termsSearchCondTitleExclude,collapse="|")))
filter_dates <- filter_dates %>% filter(nct_id %nin% trials_excluded_summary$nct_id)
interventions_tbl = tbl(src=con,'interventions')
interventions = interventions_tbl %>% select(nct_id,name,description) %>% collect()
interventions <- interventions %>% group_by(nct_id) %>% summarize(name_comb =paste(name,collapse=", "),descrip_comb=paste(description,collapse=", "))
design_groups_tbl = tbl(src=con,'design_groups')
design_groups <- design_groups_tbl %>% select(nct_id,group_type,title,description) %>% collect()
design_groups_counted <- design_groups %>% group_by(nct_id) %>% tally()
design_groups_counted <- rename(design_groups_counted,number_of_arms = n)
design_groups <- design_groups %>% group_by(nct_id) %>% summarize(group_type_comb = paste(group_type,collapse=", "))
designTrial = design_groups %>% mutate(designGroup = case_when(str_detect(tolower(group_type_comb), pattern = paste('placebo comparator')) ~ 'Placebo Comparator',
str_detect(tolower(group_type_comb), pattern = paste('active comparator')) ~ 'Active Comparator',
str_detect(tolower(group_type_comb), pattern = paste('sham')) ~ 'Sham Comparator',
str_detect(tolower(group_type_comb), pattern = paste('treatment comparison')) ~ 'Treatment Comparison',
str_detect(tolower(group_type_comb), pattern = paste('active')) ~ 'Active Comparator',
str_detect(tolower(group_type_comb), pattern = paste('case')) ~ 'Case',
str_detect(tolower(group_type_comb), pattern = paste('control')) ~ 'Control',
str_detect(tolower(group_type_comb), pattern = paste('other')) ~ 'Other',
str_detect(tolower(group_type_comb), pattern = paste('no intervention')) ~ 'No intervention',
str_detect(tolower(group_type_comb), pattern = paste('null')) ~ 'Null',
str_detect(tolower(group_type_comb), pattern = paste('experimental')) ~ 'Experimental Only'))
designTrialSummaryCheck <- designTrial %>% group_by(designGroup) %>% tally()
designTrialCollapsed = design_groups %>% mutate(designGroup = case_when(str_detect(tolower(group_type_comb), pattern = paste('placebo comparator')) ~ 'Control Arm Present',
str_detect(tolower(group_type_comb), pattern = paste('active comparator')) ~ 'Control Arm Present',
str_detect(tolower(group_type_comb), pattern = paste('sham')) ~ 'Control Arm Present',
str_detect(tolower(group_type_comb), pattern = paste('active')) ~ 'Control Arm Present',
str_detect(tolower(group_type_comb), pattern = paste('control')) ~ 'Control Arm Present',
str_detect(tolower(group_type_comb), pattern = paste('no intervention')) ~ 'Control Arm Present',
str_detect(tolower(group_type_comb), pattern = paste('null')) ~ 'No Control Arm Present',
str_detect(tolower(group_type_comb), pattern = paste('treatment comparison')) ~ 'No Control Arm Present',
str_detect(tolower(group_type_comb), pattern = paste('case')) ~ 'No Control Arm Present',
str_detect(tolower(group_type_comb), pattern = paste('other')) ~ 'No Control Arm Present',
str_detect(tolower(group_type_comb), pattern = paste('experimental')) ~ 'Experimental Only'))
designTrialCollapsedSummaryCheck <- designTrialCollapsed %>% group_by(designGroup) %>% tally()
designTrialCollapsed$design_groups_counted = design_groups_counted$number_of_arms
# will fix any mislabeled experimental arm only trials later with searh
designTrialCollapsed = designTrialCollapsed %>% mutate(multi_arm = case_when(design_groups_counted==1 ~ 'Single-Arm Trial',
(design_groups_counted>1 & designGroup == 'Control Arm Present') ~ 'Control Arm Present',
(design_groups_counted>1 & designGroup =='No Control Arm Present') ~ 'No Control Arm Present',
(design_groups_counted>1 & designGroup =='Experimental Only') ~ 'No Control Arm Present'))
designTrialCollapsedArmSummaryCheck <- designTrialCollapsed %>% group_by(multi_arm) %>% tally()
designTrialExamineExperimentalOnly <- designTrialCollapsed %>% filter(design_groups_counted>1 & designGroup == 'Experimental Only')
baseline_counts_tbl = tbl(src=con,'baseline_counts')
baseline_counts <- baseline_counts_tbl %>% select(nct_id,count) %>% collect()
design_tbl = tbl(src=con,'designs')
design = design_tbl %>% select(nct_id,intervention_model,allocation,masking) %>% collect()
location_tbl = tbl(src=con,'countries')
# check if country is the only one in a list
locations = location_tbl %>% select(nct_id,name)  %>% collect()
locations <- locations %>%  group_by(nct_id) %>% summarize(countriesPaste = paste(name,collapse=", ")) %>% mutate(usaLoc = case_when(countriesPaste == countriesList ~ 'USA only',
str_detect(countriesPaste, pattern = paste(countriesList)) ~ 'USA site present',
TRUE ~ 'no site in USA'))
sponsor_tbl = tbl(src=con,'sponsors')
sponsor <- sponsor_tbl %>%  select(nct_id,agency_class,lead_or_collaborator,name)%>% collect()
sponsor = sponsor %>% group_by(nct_id) %>% mutate(funding = case_when(any(str_detect(tolower(lead_or_collaborator), pattern = paste('lead')) & str_detect(tolower(agency_class),pattern='industry')) ~ 'Industry',
any(str_detect(tolower(lead_or_collaborator), pattern = paste('lead')) & str_detect(tolower(agency_class),pattern='nih')) ~ 'NIH',
any(str_detect(tolower(lead_or_collaborator), pattern = paste('lead')) & str_detect(tolower(agency_class),pattern='u.s. fed')) ~ 'U.S. Fed',
any(str_detect(tolower(lead_or_collaborator), pattern = paste('collaborator')) & str_detect(tolower(agency_class),pattern='industry')) ~ 'Industry',
any(str_detect(tolower(lead_or_collaborator), pattern = paste('collaborator')) & str_detect(tolower(agency_class),pattern='nih')) ~ 'NIH',
any(str_detect(tolower(lead_or_collaborator), pattern = paste('collaborator')) & str_detect(tolower(agency_class),pattern='u.s. fed')) ~ 'U.S. Fed',
TRUE ~ 'Other'))
sponsor = distinct(sponsor,nct_id,.keep_all=TRUE) %>% select(nct_id,funding)
sponsorCombined <- sponsor_tbl %>%  select(nct_id,agency_class,lead_or_collaborator,name)%>% collect()
sponsorCombined = sponsorCombined %>% group_by(nct_id) %>% mutate(fundingComb = case_when(any(str_detect(tolower(lead_or_collaborator), pattern = paste('lead')) & str_detect(tolower(agency_class),pattern='industry')) ~ 'Industry',
any(str_detect(tolower(lead_or_collaborator), pattern = paste('lead')) & str_detect(tolower(agency_class),pattern='nih')) ~ 'Public',
any(str_detect(tolower(lead_or_collaborator), pattern = paste('lead')) & str_detect(tolower(agency_class),pattern='u.s. fed')) ~ 'Public',
any(str_detect(tolower(lead_or_collaborator), pattern = paste('collaborator')) & str_detect(tolower(agency_class),pattern='industry')) ~ 'Industry',
any(str_detect(tolower(lead_or_collaborator), pattern = paste('collaborator')) & str_detect(tolower(agency_class),pattern='nih')) ~ 'Public',
any(str_detect(tolower(lead_or_collaborator), pattern = paste('collaborator')) & str_detect(tolower(agency_class),pattern='u.s. fed')) ~ 'Public',
TRUE ~ 'Other'))
sponsorCombined = sponsorCombined %>% group_by(nct_id) %>% mutate(univHosp = case_when(any(str_detect(tolower(lead_or_collaborator), pattern = paste('lead')) & str_detect(tolower(agency_class),pattern='industry')) ~ 'Other',
any(str_detect(tolower(lead_or_collaborator), pattern = paste('collaborator')) & str_detect(tolower(agency_class),pattern='industry')) ~ 'Other',
any(str_detect(tolower(lead_or_collaborator), pattern = paste('lead')) & str_detect(tolower(name),pattern='university')) ~ 'University',
any(str_detect(tolower(lead_or_collaborator), pattern = paste('lead')) & str_detect(tolower(name),pattern='hospital')) ~ 'Hospital',
TRUE ~ 'Other'))
sponsorCombined = distinct(sponsorCombined,nct_id,.keep_all=TRUE) %>% select(nct_id,fundingComb,univHosp)
calculatedValues_tbl = tbl(src=con,'calculated_values')
calculatedValues <- calculatedValues_tbl  %>% select(nct_id,were_results_reported,minimum_age_num,minimum_age_unit) %>% collect()
calculatedValues <- calculatedValues %>% filter((minimum_age_num >= 18) & (minimum_age_unit == 'Years'))
facilities_tbl = tbl(src=con,'facilities')
facilities <- facilities_tbl  %>% select(nct_id,status,name) %>%collect()
facilities_tabulated <- facilities %>% group_by(nct_id) %>% tally()
facilities_tabulated <- rename(facilities_tabulated,facilitiesCount = n)
facilities_tabulated <- facilities_tabulated %>% mutate(multisite = ifelse(facilitiesCount>1,TRUE,FALSE))
study_ref_tbl = tbl(src=con,'study_references')
study_ref <- study_ref_tbl %>% select(nct_id,pmid,reference_type,citation) %>% collect()
study_ref_tabulated <- study_ref %>% group_by(nct_id) %>% tally()
study_ref_tabulated <- rename(study_ref_tabulated,pubCount = n)
# this is a join that includes all categories, but only ones that match the description
joinedTable <- join_all(list(locations,interventions,design_groups_counted,design,designTrialCollapsed,filter_dates,facilities_tabulated,sponsor,sponsorCombined,calculatedValues),by='nct_id',type="full")
joinedTable <- joinedTable %>% filter((nct_id %in% filter_dates$nct_id) & (nct_id %in% calculatedValues$nct_id))
# get rid of any NA start dates
#joinedTable <- joinedTable[complete.cases(joinedTable$start_date),]
# this adds pub counts, and NAs for those that dont have pubs
joinedTable <- left_join(joinedTable,study_ref_tabulated,by='nct_id')
joinedTable <- joinedTable %>% mutate(pubCountBool = case_when(!is.na(pubCount) ~ 'TRUE',
TRUE ~ 'FALSE'))
joinedTable <- joinedTable %>% mutate(yearStart=year(joinedTable$study_first_posted_date))
# first pass of quality control, if a trial doesnt have a number of arms, and no placebo listed, then no control arm present/
# trials that have other matching criteria are added below
joinedTable$multi_arm[is.na(joinedTable$number_of_arms) & (joinedTable$intervention_model == 'Parallel Assignment' | joinedTable$intervention_model == 'Crossover Assignment' | joinedTable$intervention_model == 'Factorial Group Assignment' | joinedTable$intervention_model == 'Sequential Assignment') & str_detect(tolower(joinedTable$name_comb), pattern = paste(placeboString,collapse="|"),negate=TRUE)] = 'No Control Arm Present'
noArmsListed = joinedTable[is.na(joinedTable$number_of_arms) & (joinedTable$intervention_model == 'Parallel Assignment' | joinedTable$intervention_model == 'Crossover Assignment' | joinedTable$intervention_model == 'Factorial Group Assignment' | joinedTable$intervention_model == 'Sequential Assignment') & str_detect(tolower(joinedTable$name_comb), pattern = paste(placeboString,collapse="|"),negate=TRUE),]
# fix NAs for single gorup assignment, by definition now no control arm present
joinedTable$multi_arm[is.na(joinedTable$number_of_arms) & joinedTable$intervention_model == 'Single Group Assignment'] = 'Single-Arm Trial'
# fix multiple experimental arms that have placebo listed under interventions
joinedTable$multi_arm[joinedTable$number_of_arms > 1 & joinedTable$designGroup == 'Experimental Only' & str_detect(tolower(joinedTable$name_comb), pattern = paste(placeboString,collapse="|"))] = 'Control Arm Present'
joinedTable$multi_arm[joinedTable$active_placebo == 'No Intervention Comparator' |joinedTable$active_placebo == 'Placebo Comparator' | joinedTable$active_placebo == 'Active & Placebo Present' | joinedTable$active_placebo == 'Active Comparator']= 'Control Arm Present'
joinedTable$multi_arm[is.na(joinedTable$number_of_arms) & (joinedTable$intervention_model == 'Parallel Assignment' | joinedTable$intervention_model == 'Crossover Assignment' | joinedTable$intervention_model == 'Factorial Group Assignment' | joinedTable$intervention_model == 'Sequential Assignment') & str_detect(tolower(joinedTable$name_comb), pattern = paste(placeboString,collapse="|"))] = 'Control Arm Present'
# count number of missing columns
joinedTable<- joinedTable %>% mutate(numMissing = rowSums(is.na(.)))
# double check that no trials are double counted
doubleCounts <- joinedTable %>% group_by(nct_id) %>% summarise(count=n())
unique(doubleCounts$count)
# add in industry vs. non industry
joinedTable <- joinedTable %>% mutate(industryNonIndustry = case_when(str_detect(tolower(funding), pattern = paste('industry')) ~ 'Industry Sponsor',
TRUE ~ 'Non-Industry Sponsor'))
# add in information about placebo, active comparator, both
joinedTable <- joinedTable %>% mutate(active_placebo = case_when((str_detect(tolower(group_type_comb), pattern = paste('placebo comparator'))) & (str_detect(tolower(group_type_comb), pattern = paste('active comparator')))~ 'Active & Placebo Present',
(str_detect(tolower(group_type_comb), pattern = paste('sham comparator'))) & (str_detect(tolower(group_type_comb), pattern = paste('active comparator')))~ 'Active & Placebo Present',
str_detect(tolower(name_comb),  pattern = paste(placeboStringOnly,collapse="|")) ~ 'Placebo Comparator',
str_detect(tolower(name_comb),  pattern = paste(standardCareString,collapse="|")) ~ 'Placebo Comparator',
str_detect(tolower(group_type_comb), pattern = paste('active comparator')) ~ 'Active Comparator',
str_detect(tolower(group_type_comb), pattern = paste('placebo comparator')) ~ 'Placebo Comparator',
str_detect(tolower(group_type_comb),pattern=paste('sham comparator'))~ 'Placebo Comparator',
str_detect(tolower(group_type_comb),pattern=paste('no intervention'))~ 'No Intervention Comparator'))
joinedTableFix <- joinedTable %>% filter((multi_arm != 'Control Arm Present') & (!is.na(active_placebo))) %>% mutate(multi_arm = case_when((str_detect(tolower(name_comb),pattern = paste(placeboStringOnly,collapse="|"))) |(str_detect(tolower(descrip_comb),pattern = paste(placeboStringOnly,collapse="|"))) ~'Control Arm Present',
str_detect(tolower(designGroup),pattern='control arm present') ~ 'Control Arm Present'))
joinedTable$multi_arm[(joinedTable$multi_arm != 'Control Arm Present') & (!is.na(joinedTable$active_placebo))] = joinedTableFix$multi_arm
joinedTable$multi_arm[(joinedTable$multi_arm != 'Control Arm Present') & (!is.na(joinedTable$active_placebo))] = joinedTableFix$active_placebo
# do all the manual curation
#joinedTable$active_placebo[joinedTable$nct_id == 'NCT00846469'] = 'Active Comparator'
#joinedTable$multi_arm[joinedTable$nct_id == 'NCT00846469'] = 'Control Arm Present'
# create new group for control group present vs absent (lumping single arm in)
joinedTable <- joinedTable %>% mutate(control_status = case_when(multi_arm=='Control Arm Present' ~ 'Control Arm Present',
((multi_arm=='Single-Arm Trial') | (multi_arm=='No Control Arm Present')) ~ 'No Control Arm Present'))
# create column for condensed phase
joinedTable <- joinedTable %>% mutate(phase_condensed = case_when(phase=='Phase 4' ~ 'Phase 4',
((phase == 'Phase 3') | (phase == 'Phase 2/Phase 3')) ~ 'Phase 3',
((phase == 'Phase 2') | (phase == 'Phase 1/Phase 2')) ~ 'Phase 2',
((phase == 'Phase 1') | (phase == 'Early Phase 1')) ~ 'Phase 1',
phase == 'Not Applicable' ~ 'Not Applicable'))
# create column for condensed status
joinedTable <- joinedTable %>% mutate(status_condensed = case_when(((overall_status == 'Not yet recruiting') | (overall_status == 'Active, not recruiting') | (overall_status == 'Enrolling by invitation') | (overall_status == 'Recruiting')) ~ 'In process',
((overall_status == 'Withdrawn') | (overall_status == 'Terminated') | (overall_status == 'Suspended')) ~ 'Discontinued',
overall_status == 'Completed' ~ 'Completed',
TRUE ~ 'Unknown'))
# create column for phase
# done processing, now do checks, totals, and calculations
joinedTableCheck <- joinedTable %>% filter((multi_arm != 'Control Arm Present') & (!is.na(active_placebo)))
joinedTableActivePlacebo <- joinedTable %>% filter(control_status=='Control Arm Present') %>% group_by(active_placebo) %>% tally()
joinedTableWhichDesign <- joinedTable %>% filter(multi_arm=='Control Arm Present') %>% group_by(intervention_model) %>% tally()
joinedTableWhichDesignTrials <- joinedTable %>% filter(multi_arm=='Control Arm Present') %>% group_by(intervention_model)
joinedTableActivePlaceboCheck <- joinedTable %>% filter(multi_arm!='Control Arm Present') %>% group_by(active_placebo) %>% tally()
joinedTableWhichDesignCheck <- joinedTable %>% filter(multi_arm!='Control Arm Present') %>% group_by(intervention_model) %>% tally()
joinedTableActivePlaceboCheckNoCtrl <- joinedTable %>% filter(multi_arm=='No Control Arm Present') %>% group_by(active_placebo) %>% tally()
joinedTableWhichDesignCheckNoCtrl <- joinedTable %>% filter(multi_arm=='No Control Arm Present') %>% group_by(intervention_model) %>% tally()
joinedTableWhichDesignCheckNoCtrlTrials <- joinedTable %>% filter(multi_arm=='No Control Arm Present') %>% group_by(intervention_model)
joinedTableDoubleCheck <- joinedTable %>% filter((multi_arm != 'Control Arm Present') & ((active_placebo == 'Active & Placebo Present') | (active_placebo == 'Active Comparator') | (active_placebo == 'Placebo Comparator') ))
joinedTableTripleCheck <- joinedTable %>% filter((multi_arm == 'Control Arm Present') & (is.na(active_placebo)))
# check single arm
joinedTableSingleCheck <- joinedTable %>% filter((multi_arm == 'Single-Arm Trial') & ((intervention_model == "Parallel Assignment") | (intervention_model == 'Crossover Assignment')))
# group by year and multi-arm group
joinedTableCount <- joinedTable %>% group_by(yearStart,control_status) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCount <- rename(joinedTableCount,yearlyCount = n)
# calculate statistics
joinedTableTotals <- joinedTable %>% group_by(control_status) %>% tally()
controlN =  joinedTableTotals$n[joinedTableTotals$control_status == 'Control Arm Present']
noControlN = joinedTableTotals$n[joinedTableTotals$control_status == 'No Control Arm Present']
joinedTableSummarize <- joinedTable %>% group_by(control_status) %>% summarize(median=median(number_of_arms,na.rm=TRUE),iqr = IQR(number_of_arms,na.rm=TRUE))
joinedTableSummarizeCountry <- joinedTable %>% group_by(control_status,usaLoc) %>% tally()
joinedTableSummarizeCountry <- joinedTableSummarizeCountry %>% mutate(totalN = case_when(control_status=='Control Arm Present' ~ controlN ,
control_status=='No Control Arm Present' ~ noControlN))
joinedTableSummarizeType <- joinedTable %>% group_by(control_status,study_type) %>% tally()
joinedTableSummarizePhase <- joinedTable %>% group_by(control_status,phase_condensed) %>% tally()
joinedTableSummarizePhaseMore <- joinedTable %>% group_by(control_status,phase) %>% tally()
joinedTableSummarizeAgency <- joinedTable %>% group_by(control_status,fundingComb) %>% tally()
joinedTableSummarizeReported <- joinedTable %>% group_by(control_status,were_results_reported) %>% tally()
joinedTableSummarizeSite<- joinedTable %>% group_by(control_status,multisite) %>% tally()
joinedTableSummarizeStatus<- joinedTable %>% group_by(control_status,last_known_status) %>% tally()
joinedTableSummarizeOverallStatus <- joinedTable %>% group_by(control_status,status_condensed) %>% tally()
joinedTableSummarizePubCount <- joinedTable %>% group_by(control_status,pubCountBool) %>% tally()
joinedTableMedianNumbers <- joinedTable %>% filter(enrollment>0) %>% group_by(control_status) %>% summarize(median=median(enrollment,na.rm=TRUE),iqr = IQR(enrollment,na.rm=TRUE))
joinedTableUnivHosp <- joinedTable %>% filter((univHosp %in% c('University','Hospital')) & fundingComb == 'Other') %>% group_by(control_status,univHosp) %>% tally()
View(joinedTable)
View(joinedTable)
Bioequivalence Study of the Fixed Dose Combination of 5 mg Saxagliptin and 500 mg Metformin XR Tablet (Manufactured in Mt Vernon, IN) Relative to 5 mg Saxagliptin Tablet and 500 mg Metformin XR Tablet (Manufactured in Evansville, IN) Coadministered to Healthy Subjects in a Fed Condition
The acute effects of a single 40-IU dose of intranasal insulin, The acute effects of intranasal sterile saline.
3+3
3+3
View(joinedTable)
# group by year and multi-arm group
joinedTableCountCatAlloc <- joinedTable %>% mutate(yearStart = as.factor(yearStart)) %>% group_by(yearStart,allocation) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCountCatAlloc <- rename(joinedTableCountCatAlloc,yearlyCount = n)
joinedTableCatAlloc <- joinedTable %>% mutate(yearStart = as.factor(yearStart)) %>%
mutate(control_status = recode(allocation,"No Control Arm Present" = 0,"Control Arm Present"=1))
stat_model_catAlloc <- glm(allocation~yearStart,data=joinedTableCatAlloc,family=binomial(link="logit"))
joinedTableCatAlloc <- joinedTable %>% mutate(yearStart = as.factor(yearStart)) %>%
mutate(control_status = recode(allocation,"Non-Randomized" = 0,"Randomized"=1))
joinedTableAlloc <- joinedTable %>% filter(allocation=='Non-Randomized' | allocation=='Randomized')
View(joinedTableAlloc)
joinedTableCatAlloc <- joinedTableAlloc %>% mutate(yearStart = as.factor(yearStart)) %>%
mutate(control_status = recode(allocation,"Non-Randomized" = 0,"Randomized"=1))
unique(joinedTable$masking)
unique(joinedTable$multi_arm)
joinedTableMask <- joinedTable %>% filter(masking=='None (Open Label)' | masking =='Single' | masking =='Double' | masking =='Triple' |masking =='Quadruple')
View(joinedTableMask)
joinedTableMask <- joinedTable %>% filter(masking=='None (Open Label)' | masking =='Single' | masking =='Double' | masking =='Triple' |masking =='Quadruple')
# group by year and multi-arm group
joinedTableCountCatMask <- joinedTableMask %>% mutate(yearStart = as.factor(yearStart)) %>% group_by(yearStart,masking) %>%
summarize(n=n()) %>%
mutate(freq = n/sum(n))
joinedTableCountCatMask <- rename(joinedTableCountCatMask,yearlyCount = n)
joinedTableCatMask <- joinedTableMask %>% mutate(yearStart = as.factor(yearStart)) %>%
mutate(masking = recode(masking,"None (Open Label)" = 0,"Single"=1,"Double"=2,"Triple"=3,"Quadruple"=4))
View(joinedTableCatMask)
stat_model_catMask <- glm(masking~yearStart,data=joinedTableCatMask,family=binomial(link="logit"))
Multinom
multinom
library('nnet')
library('stargazer')
install.packages('stargazer')
librar('stargazer')
library('stargazer')
stat_model_catAlloc <- glm(allocation~yearStart,data=joinedTableCatAlloc,family=binomial(link="logit"))
joinedTableCatAlloc <- joinedTableAlloc %>% mutate(yearStart = as.factor(yearStart)) %>%
mutate(control_status = recode(allocation,"Non-Randomized" = 0,"Randomized"=1))
stat_model_catAlloc <- glm(allocation~yearStart,data=joinedTableCatAlloc,family=binomial(link="logit"))
unique(joinedTableCatAlloc$allocation)
joinedTableCatAlloc <- joinedTableAlloc %>% mutate(yearStart = as.factor(yearStart)) %>%
mutate(allocation = recode(allocation,"Non-Randomized" = 0,"Randomized"=1))
stat_model_catAlloc <- glm(allocation~yearStart,data=joinedTableCatAlloc,family=binomial(link="logit"))
tab_model(stat_model_catAlloc)
stat_model_catMask <- multinom(masking~yearStart,data=joinedTableCatMask)
summary(stat_model_catMask)
stargazer(stat_model_catMask,type="html",out="stat_model_catMask.htm")
confint(stat_model_catMask)
